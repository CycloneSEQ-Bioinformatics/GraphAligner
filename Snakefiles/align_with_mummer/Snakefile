# Edit config.yaml to add the paths before running
configfile: "config.yaml"
MUMMERPATH = "mummer"
READFILE = config["reads"]
GRAPHFILE = config["graph"]
SEEDSIZE = config["seedsize"]
MAXSEEDHITS = config["maxseeds"]
ALIGNERPARAMS = config["aligner_params"]
ALIGNERBINPATH = config["graphalignerfolder"] + "bin"
SCRIPTPATH = config["graphalignerfolder"] + "scripts"

rule all:
	input:
		expand("output/aln_{reads}_{graph}_all.gam", reads=READFILE, graph=GRAPHFILE),
		expand("output/aln_{reads}_{graph}_selected.gam", reads=READFILE, graph=GRAPHFILE),
		expand("output/aln_{reads}_{graph}_full_length.gam", reads=READFILE, graph=GRAPHFILE),
		expand("output/stats_{reads}_{graph}.txt", reads=READFILE, graph=GRAPHFILE)

rule fix_graph_nodeids:
	input:
		"input/{graph}.gfa"
	output:
		"tmp/{graph}_idfix.gfa",
		"tmp/{graph}_nodemapping.txt"
	shell:
		"python {SCRIPTPATH}/gfa_string_to_int.py {input} tmp/{wildcards.graph}_idfix.gfa tmp/{wildcards.graph}_nodemapping.txt"

rule make_graphreference:
	input:
		"tmp/{graph}_idfix.gfa"
	output:
		"tmp/{graph}_gfareference.fa",
		"tmp/{graph}_refnodes.txt"
	shell:
		"python {SCRIPTPATH}/makegfareference.py {input} tmp/{wildcards.graph}_refnodes.txt tmp/{wildcards.graph}_gfareference.fa"

rule reverse_reads:
	input:
		"input/{reads}.fasta"
	output:
		"tmp/{reads}_reverse.fasta"
	shell:
		"{ALIGNERBINPATH}/ReverseReads {input} {output}"

rule mummer_pipe:
	input:
		"input/{reads}.fasta",
		"tmp/{reads}_reverse.fasta",
		"tmp/{graph}_gfareference.fa",
		"tmp/{graph}_refnodes.txt"
	output:
		"tmp/seeds_{reads}_{graph}_picked.gam"
	threads: 40
	shell:
		"{MUMMERPATH} -F -qthreads {threads} -l {SEEDSIZE} tmp/{wildcards.graph}_gfareference.fa input/{wildcards.reads}.fasta tmp/{wildcards.reads}_reverse.fasta | {ALIGNERBINPATH}/PickMummerSeeds {output} tmp/{wildcards.graph}_gfareference.fa {MAXSEEDHITS} input/{wildcards.reads}.fasta"

rule align:
	input:
		"tmp/{graph}_idfix.gfa",
		"input/{reads}.fasta",
		"tmp/seeds_{reads}_{graph}_picked.gam"
	output:
		"tmp/aln_{reads}_{graph}_raw.gam"
	log:
		stdout = "tmp/aligner_stdout_{reads}_{graph}.txt",
		stderr = "tmp/aligner_stderr_{reads}_{graph}.txt"
	threads: 40
	shell:
		"/usr/bin/time -v {ALIGNERBINPATH}/Aligner -g tmp/{wildcards.graph}_idfix.gfa -f input/{wildcards.reads}.fasta -s tmp/seeds_{wildcards.reads}_{wildcards.graph}_picked.gam -a tmp/aln_{wildcards.reads}_{wildcards.graph}_raw.gam -t {threads} {ALIGNERPARAMS} 1> {log.stdout} 2> {log.stderr}"

rule postprocess:
	input:
		nodenames = "tmp/{graph}_nodemapping.txt",
		seeds = "tmp/seeds_{reads}_{graph}_picked.gam",
		raw_alns = "tmp/aln_{reads}_{graph}_raw.gam",
		reads = "input/{reads}.fasta"
	output:
		all_alns = "output/aln_{reads}_{graph}_all.gam",
		selected_alns = "output/aln_{reads}_{graph}_selected.gam",
		full_len_alns = "output/aln_{reads}_{graph}_full_length.gam",
		summary = "tmp/run_{reads}_{graph}_summary.txt",
	shell:
		"{ALIGNERBINPATH}/Postprocess {input.raw_alns} {input.reads} {input.nodenames} {input.seeds} {output.all_alns} {output.selected_alns} {output.full_len_alns} {output.summary}"

rule output_statistics:
	input:
		summary = "tmp/run_{reads}_{graph}_summary.txt",
		stderr = "tmp/aligner_stderr_{reads}_{graph}.txt"
	output:
		"output/stats_{reads}_{graph}.txt"
	run:
		shell("touch {output}"),
		shell("grep 'commit' {input.stderr} >> {output}")
		shell("grep 'Command being timed:' {input.stderr} >> {output}"),
		shell("grep 'User time (seconds):' {input.stderr} >> {output}"),
		shell("grep 'System time (seconds):' {input.stderr} >> {output}"),
		shell("grep 'Maximum resident set size (kbytes):' {input.stderr} >> {output}"),
		shell("grep 'Percent of CPU this job got:' {input.stderr} >> {output}"),
		shell("grep 'Elapsed (wall clock) time (h:mm:ss or m:ss):' {input.stderr} >> {output}"),
		shell("echo 'Number of reads:' >> {output}"),
		shell("grep 'number of reads' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of picked seeds:' >> {output}"),
		shell("grep 'number of seeds' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of reads with a seed:' >> {output}"),
		shell("grep 'reads with a seed' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of raw alignments:' >> {output}"),
		shell("grep 'number of all alignments' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of selected alignments:' >> {output}"),
		shell("grep 'number of selected alignments' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of full length alignments:' >> {output}"),
		shell("grep 'number of full length alignments' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of reads with an alignment:' >> {output}"),
		shell("grep 'reads with an alignment' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of reads broken due to an assertion:' >> {output}"),
		shell("(grep Assert < tmp/aligner_stderr_{wildcards.reads}_{wildcards.graph}.txt || true) | wc -l >> {output}"),
		shell("echo 'Number of read BP in reads:' >> {output}")
		shell("grep 'bp in reads' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of read BP in selected alignments:' >> {output}")
		shell("grep 'bp in selected alignments' < {input.summary} | cut -f 1 >> {output}"),
		shell("echo 'Number of read BP in full length alignments:' >> {output}")
		shell("grep 'bp in full length alignments' < {input.summary} | cut -f 1 >> {output}"),
