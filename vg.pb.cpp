// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vg {

namespace {

const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultipathAlignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultipathAlignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subpath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subpath_reflection_ = NULL;
const ::google::protobuf::Descriptor* KmerMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KmerMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasePileup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasePileup_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodePileup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodePileup_reflection_ = NULL;
const ::google::protobuf::Descriptor* EdgePileup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgePileup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pileup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pileup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snarl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snarl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Visit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visit_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnarlTraversal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnarlTraversal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Locus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Locus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Genotype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Genotype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Support_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Support_reflection_ = NULL;
const ::google::protobuf::Descriptor* Translation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Translation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SnarlType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_vg_2eproto() {
  protobuf_AddDesc_vg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vg.proto");
  GOOGLE_CHECK(file != NULL);
  Graph_descriptor_ = file->message_type(0);
  static const int Graph_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, path_),
  };
  Graph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Graph_descriptor_,
      Graph::default_instance_,
      Graph_offsets_,
      -1,
      -1,
      -1,
      sizeof(Graph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _is_default_instance_));
  Node_descriptor_ = file->message_type(1);
  static const int Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Edge_descriptor_ = file->message_type(2);
  static const int Edge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, from_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, to_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, overlap_),
  };
  Edge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _is_default_instance_));
  Edit_descriptor_ = file->message_type(3);
  static const int Edit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, from_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, to_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, sequence_),
  };
  Edit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edit_descriptor_,
      Edit::default_instance_,
      Edit_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, _is_default_instance_));
  Mapping_descriptor_ = file->message_type(4);
  static const int Mapping_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, edit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, rank_),
  };
  Mapping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mapping_descriptor_,
      Mapping::default_instance_,
      Mapping_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mapping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, _is_default_instance_));
  Position_descriptor_ = file->message_type(5);
  static const int Position_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, is_reverse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, name_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _is_default_instance_));
  Path_descriptor_ = file->message_type(6);
  static const int Path_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, is_circular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, length_),
  };
  Path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      -1,
      -1,
      -1,
      sizeof(Path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _is_default_instance_));
  Alignment_descriptor_ = file->message_type(7);
  static const int Alignment_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, mapping_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, query_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, sample_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, read_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, fragment_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, fragment_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, is_secondary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, locus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, refpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, read_paired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, read_mapped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, mate_unmapped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, read_on_reverse_strand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, mate_on_reverse_strand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, soft_clipped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, discordant_insert_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, uniqueness_),
  };
  Alignment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Alignment_descriptor_,
      Alignment::default_instance_,
      Alignment_offsets_,
      -1,
      -1,
      -1,
      sizeof(Alignment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alignment, _is_default_instance_));
  MultipathAlignment_descriptor_ = file->message_type(8);
  static const int MultipathAlignment_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, sample_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, read_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, subpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, mapping_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, start_),
  };
  MultipathAlignment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultipathAlignment_descriptor_,
      MultipathAlignment::default_instance_,
      MultipathAlignment_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultipathAlignment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultipathAlignment, _is_default_instance_));
  Subpath_descriptor_ = file->message_type(9);
  static const int Subpath_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subpath, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subpath, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subpath, score_),
  };
  Subpath_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Subpath_descriptor_,
      Subpath::default_instance_,
      Subpath_offsets_,
      -1,
      -1,
      -1,
      sizeof(Subpath),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subpath, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subpath, _is_default_instance_));
  KmerMatch_descriptor_ = file->message_type(10);
  static const int KmerMatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, backward_),
  };
  KmerMatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KmerMatch_descriptor_,
      KmerMatch::default_instance_,
      KmerMatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(KmerMatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KmerMatch, _is_default_instance_));
  BasePileup_descriptor_ = file->message_type(11);
  static const int BasePileup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, ref_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, num_bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, qualities_),
  };
  BasePileup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BasePileup_descriptor_,
      BasePileup::default_instance_,
      BasePileup_offsets_,
      -1,
      -1,
      -1,
      sizeof(BasePileup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasePileup, _is_default_instance_));
  NodePileup_descriptor_ = file->message_type(12);
  static const int NodePileup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, base_pileup_),
  };
  NodePileup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodePileup_descriptor_,
      NodePileup::default_instance_,
      NodePileup_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodePileup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePileup, _is_default_instance_));
  EdgePileup_descriptor_ = file->message_type(13);
  static const int EdgePileup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgePileup, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgePileup, num_reads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgePileup, num_forward_reads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgePileup, qualities_),
  };
  EdgePileup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EdgePileup_descriptor_,
      EdgePileup::default_instance_,
      EdgePileup_offsets_,
      -1,
      -1,
      -1,
      sizeof(EdgePileup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgePileup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgePileup, _is_default_instance_));
  Pileup_descriptor_ = file->message_type(14);
  static const int Pileup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pileup, node_pileups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pileup, edge_pileups_),
  };
  Pileup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pileup_descriptor_,
      Pileup::default_instance_,
      Pileup_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pileup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pileup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pileup, _is_default_instance_));
  Snarl_descriptor_ = file->message_type(15);
  static const int Snarl_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snarl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snarl, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snarl, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snarl, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snarl, name_),
  };
  Snarl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Snarl_descriptor_,
      Snarl::default_instance_,
      Snarl_offsets_,
      -1,
      -1,
      -1,
      sizeof(Snarl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snarl, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snarl, _is_default_instance_));
  Visit_descriptor_ = file->message_type(16);
  static const int Visit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, snarl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, backward_),
  };
  Visit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Visit_descriptor_,
      Visit::default_instance_,
      Visit_offsets_,
      -1,
      -1,
      -1,
      sizeof(Visit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, _is_default_instance_));
  SnarlTraversal_descriptor_ = file->message_type(17);
  static const int SnarlTraversal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnarlTraversal, visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnarlTraversal, snarl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnarlTraversal, name_),
  };
  SnarlTraversal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnarlTraversal_descriptor_,
      SnarlTraversal::default_instance_,
      SnarlTraversal_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnarlTraversal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnarlTraversal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnarlTraversal, _is_default_instance_));
  Locus_descriptor_ = file->message_type(18);
  static const int Locus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, allele_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, genotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, overall_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, allele_log_likelihood_),
  };
  Locus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Locus_descriptor_,
      Locus::default_instance_,
      Locus_offsets_,
      -1,
      -1,
      -1,
      sizeof(Locus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locus, _is_default_instance_));
  Genotype_descriptor_ = file->message_type(19);
  static const int Genotype_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, allele_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, is_phased_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, likelihood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, log_likelihood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, log_prior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, log_posterior_),
  };
  Genotype_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Genotype_descriptor_,
      Genotype::default_instance_,
      Genotype_offsets_,
      -1,
      -1,
      -1,
      sizeof(Genotype),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genotype, _is_default_instance_));
  Support_descriptor_ = file->message_type(20);
  static const int Support_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support, reverse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support, right_),
  };
  Support_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Support_descriptor_,
      Support::default_instance_,
      Support_offsets_,
      -1,
      -1,
      -1,
      sizeof(Support),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Support, _is_default_instance_));
  Translation_descriptor_ = file->message_type(21);
  static const int Translation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, to_),
  };
  Translation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Translation_descriptor_,
      Translation::default_instance_,
      Translation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Translation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, _is_default_instance_));
  SnarlType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Graph_descriptor_, &Graph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edit_descriptor_, &Edit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mapping_descriptor_, &Mapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Alignment_descriptor_, &Alignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultipathAlignment_descriptor_, &MultipathAlignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Subpath_descriptor_, &Subpath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KmerMatch_descriptor_, &KmerMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BasePileup_descriptor_, &BasePileup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodePileup_descriptor_, &NodePileup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EdgePileup_descriptor_, &EdgePileup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pileup_descriptor_, &Pileup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Snarl_descriptor_, &Snarl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Visit_descriptor_, &Visit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnarlTraversal_descriptor_, &SnarlTraversal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Locus_descriptor_, &Locus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Genotype_descriptor_, &Genotype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Support_descriptor_, &Support::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Translation_descriptor_, &Translation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vg_2eproto() {
  delete Graph::default_instance_;
  delete Graph_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete Edit::default_instance_;
  delete Edit_reflection_;
  delete Mapping::default_instance_;
  delete Mapping_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete Alignment::default_instance_;
  delete Alignment_reflection_;
  delete MultipathAlignment::default_instance_;
  delete MultipathAlignment_reflection_;
  delete Subpath::default_instance_;
  delete Subpath_reflection_;
  delete KmerMatch::default_instance_;
  delete KmerMatch_reflection_;
  delete BasePileup::default_instance_;
  delete BasePileup_reflection_;
  delete NodePileup::default_instance_;
  delete NodePileup_reflection_;
  delete EdgePileup::default_instance_;
  delete EdgePileup_reflection_;
  delete Pileup::default_instance_;
  delete Pileup_reflection_;
  delete Snarl::default_instance_;
  delete Snarl_reflection_;
  delete Visit::default_instance_;
  delete Visit_reflection_;
  delete SnarlTraversal::default_instance_;
  delete SnarlTraversal_reflection_;
  delete Locus::default_instance_;
  delete Locus_reflection_;
  delete Genotype::default_instance_;
  delete Genotype_reflection_;
  delete Support::default_instance_;
  delete Support_reflection_;
  delete Translation::default_instance_;
  delete Translation_reflection_;
}

void protobuf_AddDesc_vg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_vg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010vg.proto\022\002vg\"O\n\005Graph\022\026\n\004node\030\001 \003(\0132\010."
    "vg.Node\022\026\n\004edge\030\002 \003(\0132\010.vg.Edge\022\026\n\004path\030"
    "\003 \003(\0132\010.vg.Path\"2\n\004Node\022\020\n\010sequence\030\001 \001("
    "\t\022\014\n\004name\030\002 \001(\t\022\n\n\002id\030\003 \001(\003\"U\n\004Edge\022\014\n\004f"
    "rom\030\001 \001(\003\022\n\n\002to\030\002 \001(\003\022\022\n\nfrom_start\030\003 \001("
    "\010\022\016\n\006to_end\030\004 \001(\010\022\017\n\007overlap\030\005 \001(\005\"@\n\004Ed"
    "it\022\023\n\013from_length\030\001 \001(\005\022\021\n\tto_length\030\002 \001"
    "(\005\022\020\n\010sequence\030\003 \001(\t\"O\n\007Mapping\022\036\n\010posit"
    "ion\030\001 \001(\0132\014.vg.Position\022\026\n\004edit\030\002 \003(\0132\010."
    "vg.Edit\022\014\n\004rank\030\005 \001(\003\"M\n\010Position\022\017\n\007nod"
    "e_id\030\001 \001(\003\022\016\n\006offset\030\002 \001(\003\022\022\n\nis_reverse"
    "\030\004 \001(\010\022\014\n\004name\030\005 \001(\t\"W\n\004Path\022\014\n\004name\030\001 \001"
    "(\t\022\034\n\007mapping\030\002 \003(\0132\013.vg.Mapping\022\023\n\013is_c"
    "ircular\030\003 \001(\010\022\016\n\006length\030\004 \001(\003\"\320\004\n\tAlignm"
    "ent\022\020\n\010sequence\030\001 \001(\t\022\026\n\004path\030\002 \001(\0132\010.vg"
    ".Path\022\014\n\004name\030\003 \001(\t\022\017\n\007quality\030\004 \001(\014\022\027\n\017"
    "mapping_quality\030\005 \001(\005\022\r\n\005score\030\006 \001(\005\022\026\n\016"
    "query_position\030\007 \001(\005\022\023\n\013sample_name\030\t \001("
    "\t\022\022\n\nread_group\030\n \001(\t\022$\n\rfragment_prev\030\013"
    " \001(\0132\r.vg.Alignment\022$\n\rfragment_next\030\014 \001"
    "(\0132\r.vg.Alignment\022\024\n\014is_secondary\030\017 \001(\010\022"
    "\020\n\010identity\030\020 \001(\001\022\032\n\010fragment\030\021 \003(\0132\010.vg"
    ".Path\022\030\n\005locus\030\022 \003(\0132\t.vg.Locus\022\034\n\006refpo"
    "s\030\023 \003(\0132\014.vg.Position\022\023\n\013read_paired\030\024 \001"
    "(\010\022\023\n\013read_mapped\030\025 \001(\010\022\025\n\rmate_unmapped"
    "\030\026 \001(\010\022\036\n\026read_on_reverse_strand\030\027 \001(\010\022\036"
    "\n\026mate_on_reverse_strand\030\030 \001(\010\022\024\n\014soft_c"
    "lipped\030\031 \001(\010\022\036\n\026discordant_insert_size\030\032"
    " \001(\010\022\022\n\nuniqueness\030\033 \001(\001\"\264\001\n\022MultipathAl"
    "ignment\022\020\n\010sequence\030\001 \001(\t\022\017\n\007quality\030\002 \001"
    "(\014\022\014\n\004name\030\003 \001(\t\022\023\n\013sample_name\030\004 \001(\t\022\022\n"
    "\nread_group\030\005 \001(\t\022\034\n\007subpath\030\006 \003(\0132\013.vg."
    "Subpath\022\027\n\017mapping_quality\030\007 \001(\005\022\r\n\005star"
    "t\030\010 \003(\r\">\n\007Subpath\022\026\n\004path\030\001 \001(\0132\010.vg.Pa"
    "th\022\014\n\004next\030\002 \003(\r\022\r\n\005score\030\003 \001(\005\"R\n\tKmerM"
    "atch\022\020\n\010sequence\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\003\022"
    "\020\n\010position\030\003 \001(\021\022\020\n\010backward\030\004 \001(\010\"S\n\nB"
    "asePileup\022\020\n\010ref_base\030\001 \001(\005\022\021\n\tnum_bases"
    "\030\002 \001(\005\022\r\n\005bases\030\003 \001(\t\022\021\n\tqualities\030\004 \001(\014"
    "\"B\n\nNodePileup\022\017\n\007node_id\030\001 \001(\003\022#\n\013base_"
    "pileup\030\002 \003(\0132\016.vg.BasePileup\"e\n\nEdgePile"
    "up\022\026\n\004edge\030\001 \001(\0132\010.vg.Edge\022\021\n\tnum_reads\030"
    "\002 \001(\005\022\031\n\021num_forward_reads\030\003 \001(\005\022\021\n\tqual"
    "ities\030\004 \001(\014\"T\n\006Pileup\022$\n\014node_pileups\030\001 "
    "\003(\0132\016.vg.NodePileup\022$\n\014edge_pileups\030\002 \003("
    "\0132\016.vg.EdgePileup\"\177\n\005Snarl\022\033\n\004type\030\001 \001(\016"
    "2\r.vg.SnarlType\022\030\n\005start\030\002 \001(\0132\t.vg.Visi"
    "t\022\026\n\003end\030\003 \001(\0132\t.vg.Visit\022\031\n\006parent\030\004 \001("
    "\0132\t.vg.Snarl\022\014\n\004name\030\005 \001(\t\"D\n\005Visit\022\017\n\007n"
    "ode_id\030\001 \001(\003\022\030\n\005snarl\030\002 \001(\0132\t.vg.Snarl\022\020"
    "\n\010backward\030\003 \001(\010\"S\n\016SnarlTraversal\022\031\n\006vi"
    "sits\030\001 \003(\0132\t.vg.Visit\022\030\n\005snarl\030\002 \001(\0132\t.v"
    "g.Snarl\022\014\n\004name\030\003 \001(\t\"\262\001\n\005Locus\022\014\n\004name\030"
    "\001 \001(\t\022\030\n\006allele\030\002 \003(\0132\010.vg.Path\022\034\n\007suppo"
    "rt\030\003 \003(\0132\013.vg.Support\022\036\n\010genotype\030\004 \003(\0132"
    "\014.vg.Genotype\022$\n\017overall_support\030\005 \001(\0132\013"
    ".vg.Support\022\035\n\025allele_log_likelihood\030\006 \003"
    "(\001\"\203\001\n\010Genotype\022\016\n\006allele\030\001 \003(\005\022\021\n\tis_ph"
    "ased\030\002 \001(\010\022\022\n\nlikelihood\030\003 \001(\001\022\026\n\016log_li"
    "kelihood\030\004 \001(\001\022\021\n\tlog_prior\030\005 \001(\001\022\025\n\rlog"
    "_posterior\030\006 \001(\001\"Y\n\007Support\022\017\n\007quality\030\001"
    " \001(\001\022\017\n\007forward\030\002 \001(\001\022\017\n\007reverse\030\003 \001(\001\022\014"
    "\n\004left\030\004 \001(\001\022\r\n\005right\030\005 \001(\001\";\n\013Translati"
    "on\022\026\n\004from\030\001 \001(\0132\010.vg.Path\022\024\n\002to\030\002 \001(\0132\010"
    ".vg.Path*.\n\tSnarlType\022\020\n\014UNCLASSIFIED\020\000\022"
    "\017\n\013ULTRABUBBLE\020\001b\006proto3", 2624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vg.proto", &protobuf_RegisterTypes);
  Graph::default_instance_ = new Graph();
  Node::default_instance_ = new Node();
  Edge::default_instance_ = new Edge();
  Edit::default_instance_ = new Edit();
  Mapping::default_instance_ = new Mapping();
  Position::default_instance_ = new Position();
  Path::default_instance_ = new Path();
  Alignment::default_instance_ = new Alignment();
  MultipathAlignment::default_instance_ = new MultipathAlignment();
  Subpath::default_instance_ = new Subpath();
  KmerMatch::default_instance_ = new KmerMatch();
  BasePileup::default_instance_ = new BasePileup();
  NodePileup::default_instance_ = new NodePileup();
  EdgePileup::default_instance_ = new EdgePileup();
  Pileup::default_instance_ = new Pileup();
  Snarl::default_instance_ = new Snarl();
  Visit::default_instance_ = new Visit();
  SnarlTraversal::default_instance_ = new SnarlTraversal();
  Locus::default_instance_ = new Locus();
  Genotype::default_instance_ = new Genotype();
  Support::default_instance_ = new Support();
  Translation::default_instance_ = new Translation();
  Graph::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  Edit::default_instance_->InitAsDefaultInstance();
  Mapping::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  Alignment::default_instance_->InitAsDefaultInstance();
  MultipathAlignment::default_instance_->InitAsDefaultInstance();
  Subpath::default_instance_->InitAsDefaultInstance();
  KmerMatch::default_instance_->InitAsDefaultInstance();
  BasePileup::default_instance_->InitAsDefaultInstance();
  NodePileup::default_instance_->InitAsDefaultInstance();
  EdgePileup::default_instance_->InitAsDefaultInstance();
  Pileup::default_instance_->InitAsDefaultInstance();
  Snarl::default_instance_->InitAsDefaultInstance();
  Visit::default_instance_->InitAsDefaultInstance();
  SnarlTraversal::default_instance_->InitAsDefaultInstance();
  Locus::default_instance_->InitAsDefaultInstance();
  Genotype::default_instance_->InitAsDefaultInstance();
  Support::default_instance_->InitAsDefaultInstance();
  Translation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vg_2eproto {
  StaticDescriptorInitializer_vg_2eproto() {
    protobuf_AddDesc_vg_2eproto();
  }
} static_descriptor_initializer_vg_2eproto_;
const ::google::protobuf::EnumDescriptor* SnarlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnarlType_descriptor_;
}
bool SnarlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kNodeFieldNumber;
const int Graph::kEdgeFieldNumber;
const int Graph::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Graph)
}

void Graph::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Graph)
}

void Graph::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:vg.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Graph* Graph::default_instance_ = NULL;

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Graph)
  node_.Clear();
  edge_.Clear();
  path_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.Node node = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node;
        if (input->ExpectTag(18)) goto parse_loop_edge;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Edge edge = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_edge;
        if (input->ExpectTag(26)) goto parse_loop_path;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Path path = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_path;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Graph)
  // repeated .vg.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .vg.Edge edge = 2;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edge(i), output);
  }

  // repeated .vg.Path path = 3;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Graph)
  // repeated .vg.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node(i), false, target);
  }

  // repeated .vg.Edge edge = 2;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edge(i), false, target);
  }

  // repeated .vg.Path path = 3;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->path(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Graph)
  return target;
}

int Graph::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Graph)
  int total_size = 0;

  // repeated .vg.Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  // repeated .vg.Edge edge = 2;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  // repeated .vg.Path path = 3;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Graph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Graph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Graph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  path_.MergeFrom(from.path_);
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {

  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  node_.UnsafeArenaSwap(&other->node_);
  edge_.UnsafeArenaSwap(&other->edge_);
  path_.UnsafeArenaSwap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// repeated .vg.Node node = 1;
int Graph::node_size() const {
  return node_.size();
}
void Graph::clear_node() {
  node_.Clear();
}
const ::vg::Node& Graph::node(int index) const {
  // @@protoc_insertion_point(field_get:vg.Graph.node)
  return node_.Get(index);
}
::vg::Node* Graph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Graph.node)
  return node_.Mutable(index);
}
::vg::Node* Graph::add_node() {
  // @@protoc_insertion_point(field_add:vg.Graph.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Node >*
Graph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:vg.Graph.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Node >&
Graph::node() const {
  // @@protoc_insertion_point(field_list:vg.Graph.node)
  return node_;
}

// repeated .vg.Edge edge = 2;
int Graph::edge_size() const {
  return edge_.size();
}
void Graph::clear_edge() {
  edge_.Clear();
}
const ::vg::Edge& Graph::edge(int index) const {
  // @@protoc_insertion_point(field_get:vg.Graph.edge)
  return edge_.Get(index);
}
::vg::Edge* Graph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Graph.edge)
  return edge_.Mutable(index);
}
::vg::Edge* Graph::add_edge() {
  // @@protoc_insertion_point(field_add:vg.Graph.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Edge >*
Graph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:vg.Graph.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Edge >&
Graph::edge() const {
  // @@protoc_insertion_point(field_list:vg.Graph.edge)
  return edge_;
}

// repeated .vg.Path path = 3;
int Graph::path_size() const {
  return path_.size();
}
void Graph::clear_path() {
  path_.Clear();
}
const ::vg::Path& Graph::path(int index) const {
  // @@protoc_insertion_point(field_get:vg.Graph.path)
  return path_.Get(index);
}
::vg::Path* Graph::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Graph.path)
  return path_.Mutable(index);
}
::vg::Path* Graph::add_path() {
  // @@protoc_insertion_point(field_add:vg.Graph.path)
  return path_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Path >*
Graph::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:vg.Graph.path)
  return &path_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Path >&
Graph::path() const {
  // @@protoc_insertion_point(field_list:vg.Graph.path)
  return path_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kSequenceFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:vg.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Node)
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Node.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Node)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Node)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Node)
  int total_size = 0;

  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  sequence_.Swap(&other->sequence_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string sequence = 1;
void Node::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::sequence() const {
  // @@protoc_insertion_point(field_get:vg.Node.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Node.sequence)
}
 void Node::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Node.sequence)
}
 void Node::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Node.sequence)
}
 ::std::string* Node::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.Node.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_sequence() {
  // @@protoc_insertion_point(field_release:vg.Node.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.Node.sequence)
}

// optional string name = 2;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:vg.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Node.name)
}
 void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Node.name)
}
 void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Node.name)
}
 ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:vg.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Node.name)
}

// optional int64 id = 3;
void Node::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Node::id() const {
  // @@protoc_insertion_point(field_get:vg.Node.id)
  return id_;
}
 void Node::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:vg.Node.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kFromFieldNumber;
const int Edge::kToFieldNumber;
const int Edge::kFromStartFieldNumber;
const int Edge::kToEndFieldNumber;
const int Edge::kOverlapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Edge)
}

void Edge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Edge)
}

void Edge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  from_ = GOOGLE_LONGLONG(0);
  to_ = GOOGLE_LONGLONG(0);
  from_start_ = false;
  to_end_ = false;
  overlap_ = 0;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:vg.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Edge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Edge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Edge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_, overlap_);

#undef ZR_HELPER_
#undef ZR_

}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // optional int64 to = 2;
      case 2: {
        if (tag == 16) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_start;
        break;
      }

      // optional bool from_start = 3;
      case 3: {
        if (tag == 24) {
         parse_from_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_to_end;
        break;
      }

      // optional bool to_end = 4;
      case 4: {
        if (tag == 32) {
         parse_to_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_overlap;
        break;
      }

      // optional int32 overlap = 5;
      case 5: {
        if (tag == 40) {
         parse_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlap_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Edge)
  // optional int64 from = 1;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->from(), output);
  }

  // optional int64 to = 2;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->to(), output);
  }

  // optional bool from_start = 3;
  if (this->from_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_start(), output);
  }

  // optional bool to_end = 4;
  if (this->to_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->to_end(), output);
  }

  // optional int32 overlap = 5;
  if (this->overlap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->overlap(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edge)
  // optional int64 from = 1;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->from(), target);
  }

  // optional int64 to = 2;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->to(), target);
  }

  // optional bool from_start = 3;
  if (this->from_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_start(), target);
  }

  // optional bool to_end = 4;
  if (this->to_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->to_end(), target);
  }

  // optional int32 overlap = 5;
  if (this->overlap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->overlap(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Edge)
  return target;
}

int Edge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Edge)
  int total_size = 0;

  // optional int64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from());
  }

  // optional int64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to());
  }

  // optional bool from_start = 3;
  if (this->from_start() != 0) {
    total_size += 1 + 1;
  }

  // optional bool to_end = 4;
  if (this->to_end() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 overlap = 5;
  if (this->overlap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->overlap());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Edge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.from_start() != 0) {
    set_from_start(from.from_start());
  }
  if (from.to_end() != 0) {
    set_to_end(from.to_end());
  }
  if (from.overlap() != 0) {
    set_overlap(from.overlap());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  std::swap(from_start_, other->from_start_);
  std::swap(to_end_, other->to_end_);
  std::swap(overlap_, other->overlap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional int64 from = 1;
void Edge::clear_from() {
  from_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::from() const {
  // @@protoc_insertion_point(field_get:vg.Edge.from)
  return from_;
}
 void Edge::set_from(::google::protobuf::int64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.from)
}

// optional int64 to = 2;
void Edge::clear_to() {
  to_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::to() const {
  // @@protoc_insertion_point(field_get:vg.Edge.to)
  return to_;
}
 void Edge::set_to(::google::protobuf::int64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.to)
}

// optional bool from_start = 3;
void Edge::clear_from_start() {
  from_start_ = false;
}
 bool Edge::from_start() const {
  // @@protoc_insertion_point(field_get:vg.Edge.from_start)
  return from_start_;
}
 void Edge::set_from_start(bool value) {
  
  from_start_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.from_start)
}

// optional bool to_end = 4;
void Edge::clear_to_end() {
  to_end_ = false;
}
 bool Edge::to_end() const {
  // @@protoc_insertion_point(field_get:vg.Edge.to_end)
  return to_end_;
}
 void Edge::set_to_end(bool value) {
  
  to_end_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.to_end)
}

// optional int32 overlap = 5;
void Edge::clear_overlap() {
  overlap_ = 0;
}
 ::google::protobuf::int32 Edge::overlap() const {
  // @@protoc_insertion_point(field_get:vg.Edge.overlap)
  return overlap_;
}
 void Edge::set_overlap(::google::protobuf::int32 value) {
  
  overlap_ = value;
  // @@protoc_insertion_point(field_set:vg.Edge.overlap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edit::kFromLengthFieldNumber;
const int Edit::kToLengthFieldNumber;
const int Edit::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edit::Edit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Edit)
}

void Edit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Edit::Edit(const Edit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Edit)
}

void Edit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_length_ = 0;
  to_length_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Edit::~Edit() {
  // @@protoc_insertion_point(destructor:vg.Edit)
  SharedDtor();
}

void Edit::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Edit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edit_descriptor_;
}

const Edit& Edit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Edit* Edit::default_instance_ = NULL;

Edit* Edit::New(::google::protobuf::Arena* arena) const {
  Edit* n = new Edit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edit::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Edit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Edit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Edit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_length_, to_length_);
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Edit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Edit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 from_length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_length;
        break;
      }

      // optional int32 to_length = 2;
      case 2: {
        if (tag == 16) {
         parse_to_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sequence;
        break;
      }

      // optional string sequence = 3;
      case 3: {
        if (tag == 26) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Edit.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Edit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Edit)
  return false;
#undef DO_
}

void Edit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Edit)
  // optional int32 from_length = 1;
  if (this->from_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_length(), output);
  }

  // optional int32 to_length = 2;
  if (this->to_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_length(), output);
  }

  // optional string sequence = 3;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Edit.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Edit)
}

::google::protobuf::uint8* Edit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edit)
  // optional int32 from_length = 1;
  if (this->from_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_length(), target);
  }

  // optional int32 to_length = 2;
  if (this->to_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_length(), target);
  }

  // optional string sequence = 3;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Edit.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Edit)
  return target;
}

int Edit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Edit)
  int total_size = 0;

  // optional int32 from_length = 1;
  if (this->from_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_length());
  }

  // optional int32 to_length = 2;
  if (this->to_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_length());
  }

  // optional string sequence = 3;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Edit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Edit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Edit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Edit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Edit)
    MergeFrom(*source);
  }
}

void Edit::MergeFrom(const Edit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Edit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.from_length() != 0) {
    set_from_length(from.from_length());
  }
  if (from.to_length() != 0) {
    set_to_length(from.to_length());
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
}

void Edit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Edit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edit::CopyFrom(const Edit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Edit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edit::IsInitialized() const {

  return true;
}

void Edit::Swap(Edit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edit::InternalSwap(Edit* other) {
  std::swap(from_length_, other->from_length_);
  std::swap(to_length_, other->to_length_);
  sequence_.Swap(&other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edit_descriptor_;
  metadata.reflection = Edit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edit

// optional int32 from_length = 1;
void Edit::clear_from_length() {
  from_length_ = 0;
}
 ::google::protobuf::int32 Edit::from_length() const {
  // @@protoc_insertion_point(field_get:vg.Edit.from_length)
  return from_length_;
}
 void Edit::set_from_length(::google::protobuf::int32 value) {
  
  from_length_ = value;
  // @@protoc_insertion_point(field_set:vg.Edit.from_length)
}

// optional int32 to_length = 2;
void Edit::clear_to_length() {
  to_length_ = 0;
}
 ::google::protobuf::int32 Edit::to_length() const {
  // @@protoc_insertion_point(field_get:vg.Edit.to_length)
  return to_length_;
}
 void Edit::set_to_length(::google::protobuf::int32 value) {
  
  to_length_ = value;
  // @@protoc_insertion_point(field_set:vg.Edit.to_length)
}

// optional string sequence = 3;
void Edit::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Edit::sequence() const {
  // @@protoc_insertion_point(field_get:vg.Edit.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edit::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Edit.sequence)
}
 void Edit::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Edit.sequence)
}
 void Edit::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Edit.sequence)
}
 ::std::string* Edit::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.Edit.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Edit::release_sequence() {
  // @@protoc_insertion_point(field_release:vg.Edit.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edit::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.Edit.sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mapping::kPositionFieldNumber;
const int Mapping::kEditFieldNumber;
const int Mapping::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mapping::Mapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Mapping)
}

void Mapping::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::vg::Position*>(&::vg::Position::default_instance());
}

Mapping::Mapping(const Mapping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Mapping)
}

void Mapping::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_ = NULL;
  rank_ = GOOGLE_LONGLONG(0);
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:vg.Mapping)
  SharedDtor();
}

void Mapping::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void Mapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mapping_descriptor_;
}

const Mapping& Mapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Mapping* Mapping::default_instance_ = NULL;

Mapping* Mapping::New(::google::protobuf::Arena* arena) const {
  Mapping* n = new Mapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Mapping)
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  rank_ = GOOGLE_LONGLONG(0);
  edit_.Clear();
}

bool Mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Mapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vg.Position position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_edit;
        break;
      }

      // repeated .vg.Edit edit = 2;
      case 2: {
        if (tag == 18) {
         parse_edit:
          DO_(input->IncrementRecursionDepth());
         parse_loop_edit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_edit;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int64 rank = 5;
      case 5: {
        if (tag == 40) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Mapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Mapping)
  return false;
#undef DO_
}

void Mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Mapping)
  // optional .vg.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // repeated .vg.Edit edit = 2;
  for (unsigned int i = 0, n = this->edit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edit(i), output);
  }

  // optional int64 rank = 5;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->rank(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Mapping)
}

::google::protobuf::uint8* Mapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Mapping)
  // optional .vg.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // repeated .vg.Edit edit = 2;
  for (unsigned int i = 0, n = this->edit_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edit(i), false, target);
  }

  // optional int64 rank = 5;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->rank(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Mapping)
  return target;
}

int Mapping::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Mapping)
  int total_size = 0;

  // optional .vg.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional int64 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rank());
  }

  // repeated .vg.Edit edit = 2;
  total_size += 1 * this->edit_size();
  for (int i = 0; i < this->edit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edit(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Mapping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mapping* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Mapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Mapping)
    MergeFrom(*source);
  }
}

void Mapping::MergeFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Mapping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  edit_.MergeFrom(from.edit_);
  if (from.has_position()) {
    mutable_position()->::vg::Position::MergeFrom(from.position());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void Mapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {

  return true;
}

void Mapping::Swap(Mapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mapping::InternalSwap(Mapping* other) {
  std::swap(position_, other->position_);
  edit_.UnsafeArenaSwap(&other->edit_);
  std::swap(rank_, other->rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mapping_descriptor_;
  metadata.reflection = Mapping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mapping

// optional .vg.Position position = 1;
bool Mapping::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Mapping::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::vg::Position& Mapping::position() const {
  // @@protoc_insertion_point(field_get:vg.Mapping.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::vg::Position* Mapping::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::vg::Position;
  }
  // @@protoc_insertion_point(field_mutable:vg.Mapping.position)
  return position_;
}
::vg::Position* Mapping::release_position() {
  // @@protoc_insertion_point(field_release:vg.Mapping.position)
  
  ::vg::Position* temp = position_;
  position_ = NULL;
  return temp;
}
void Mapping::set_allocated_position(::vg::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Mapping.position)
}

// repeated .vg.Edit edit = 2;
int Mapping::edit_size() const {
  return edit_.size();
}
void Mapping::clear_edit() {
  edit_.Clear();
}
const ::vg::Edit& Mapping::edit(int index) const {
  // @@protoc_insertion_point(field_get:vg.Mapping.edit)
  return edit_.Get(index);
}
::vg::Edit* Mapping::mutable_edit(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Mapping.edit)
  return edit_.Mutable(index);
}
::vg::Edit* Mapping::add_edit() {
  // @@protoc_insertion_point(field_add:vg.Mapping.edit)
  return edit_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Edit >*
Mapping::mutable_edit() {
  // @@protoc_insertion_point(field_mutable_list:vg.Mapping.edit)
  return &edit_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Edit >&
Mapping::edit() const {
  // @@protoc_insertion_point(field_list:vg.Mapping.edit)
  return edit_;
}

// optional int64 rank = 5;
void Mapping::clear_rank() {
  rank_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Mapping::rank() const {
  // @@protoc_insertion_point(field_get:vg.Mapping.rank)
  return rank_;
}
 void Mapping::set_rank(::google::protobuf::int64 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:vg.Mapping.rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kNodeIdFieldNumber;
const int Position::kOffsetFieldNumber;
const int Position::kIsReverseFieldNumber;
const int Position::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Position)
}

void Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Position)
}

void Position::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = GOOGLE_LONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  is_reverse_ = false;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:vg.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, offset_);
  is_reverse_ = false;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int64 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_reverse;
        break;
      }

      // optional bool is_reverse = 4;
      case 4: {
        if (tag == 32) {
         parse_is_reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reverse_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Position.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Position)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // optional int64 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset(), output);
  }

  // optional bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_reverse(), output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Position.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Position)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // optional int64 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset(), target);
  }

  // optional bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_reverse(), target);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Position.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Position)
  return target;
}

int Position::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Position)
  int total_size = 0;

  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // optional int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // optional bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    total_size += 1 + 1;
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.is_reverse() != 0) {
    set_is_reverse(from.is_reverse());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(offset_, other->offset_);
  std::swap(is_reverse_, other->is_reverse_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional int64 node_id = 1;
void Position::clear_node_id() {
  node_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Position::node_id() const {
  // @@protoc_insertion_point(field_get:vg.Position.node_id)
  return node_id_;
}
 void Position::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:vg.Position.node_id)
}

// optional int64 offset = 2;
void Position::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Position::offset() const {
  // @@protoc_insertion_point(field_get:vg.Position.offset)
  return offset_;
}
 void Position::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:vg.Position.offset)
}

// optional bool is_reverse = 4;
void Position::clear_is_reverse() {
  is_reverse_ = false;
}
 bool Position::is_reverse() const {
  // @@protoc_insertion_point(field_get:vg.Position.is_reverse)
  return is_reverse_;
}
 void Position::set_is_reverse(bool value) {
  
  is_reverse_ = value;
  // @@protoc_insertion_point(field_set:vg.Position.is_reverse)
}

// optional string name = 5;
void Position::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Position::name() const {
  // @@protoc_insertion_point(field_get:vg.Position.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Position::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Position.name)
}
 void Position::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Position.name)
}
 void Position::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Position.name)
}
 ::std::string* Position::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Position.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Position::release_name() {
  // @@protoc_insertion_point(field_release:vg.Position.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Position::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Position.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kNameFieldNumber;
const int Path::kMappingFieldNumber;
const int Path::kIsCircularFieldNumber;
const int Path::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Path)
}

void Path::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Path::Path(const Path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Path)
}

void Path::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_circular_ = false;
  length_ = GOOGLE_LONGLONG(0);
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:vg.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Path)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Path, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Path*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, is_circular_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  mapping_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Path.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapping;
        break;
      }

      // repeated .vg.Mapping mapping = 2;
      case 2: {
        if (tag == 18) {
         parse_mapping:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mapping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mapping;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_is_circular;
        break;
      }

      // optional bool is_circular = 3;
      case 3: {
        if (tag == 24) {
         parse_is_circular:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_circular_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional int64 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Path)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Path.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .vg.Mapping mapping = 2;
  for (unsigned int i = 0, n = this->mapping_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapping(i), output);
  }

  // optional bool is_circular = 3;
  if (this->is_circular() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_circular(), output);
  }

  // optional int64 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Path)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Path.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .vg.Mapping mapping = 2;
  for (unsigned int i = 0, n = this->mapping_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mapping(i), false, target);
  }

  // optional bool is_circular = 3;
  if (this->is_circular() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_circular(), target);
  }

  // optional int64 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Path)
  return target;
}

int Path::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Path)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bool is_circular = 3;
  if (this->is_circular() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  // repeated .vg.Mapping mapping = 2;
  total_size += 1 * this->mapping_size();
  for (int i = 0; i < this->mapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapping(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Path)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Path* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Path)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mapping_.MergeFrom(from.mapping_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.is_circular() != 0) {
    set_is_circular(from.is_circular());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  name_.Swap(&other->name_);
  mapping_.UnsafeArenaSwap(&other->mapping_);
  std::swap(is_circular_, other->is_circular_);
  std::swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// optional string name = 1;
void Path::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:vg.Path.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Path.name)
}
 void Path::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Path.name)
}
 void Path::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Path.name)
}
 ::std::string* Path::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Path.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:vg.Path.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Path.name)
}

// repeated .vg.Mapping mapping = 2;
int Path::mapping_size() const {
  return mapping_.size();
}
void Path::clear_mapping() {
  mapping_.Clear();
}
const ::vg::Mapping& Path::mapping(int index) const {
  // @@protoc_insertion_point(field_get:vg.Path.mapping)
  return mapping_.Get(index);
}
::vg::Mapping* Path::mutable_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Path.mapping)
  return mapping_.Mutable(index);
}
::vg::Mapping* Path::add_mapping() {
  // @@protoc_insertion_point(field_add:vg.Path.mapping)
  return mapping_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Mapping >*
Path::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_list:vg.Path.mapping)
  return &mapping_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Mapping >&
Path::mapping() const {
  // @@protoc_insertion_point(field_list:vg.Path.mapping)
  return mapping_;
}

// optional bool is_circular = 3;
void Path::clear_is_circular() {
  is_circular_ = false;
}
 bool Path::is_circular() const {
  // @@protoc_insertion_point(field_get:vg.Path.is_circular)
  return is_circular_;
}
 void Path::set_is_circular(bool value) {
  
  is_circular_ = value;
  // @@protoc_insertion_point(field_set:vg.Path.is_circular)
}

// optional int64 length = 4;
void Path::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Path::length() const {
  // @@protoc_insertion_point(field_get:vg.Path.length)
  return length_;
}
 void Path::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:vg.Path.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alignment::kSequenceFieldNumber;
const int Alignment::kPathFieldNumber;
const int Alignment::kNameFieldNumber;
const int Alignment::kQualityFieldNumber;
const int Alignment::kMappingQualityFieldNumber;
const int Alignment::kScoreFieldNumber;
const int Alignment::kQueryPositionFieldNumber;
const int Alignment::kSampleNameFieldNumber;
const int Alignment::kReadGroupFieldNumber;
const int Alignment::kFragmentPrevFieldNumber;
const int Alignment::kFragmentNextFieldNumber;
const int Alignment::kIsSecondaryFieldNumber;
const int Alignment::kIdentityFieldNumber;
const int Alignment::kFragmentFieldNumber;
const int Alignment::kLocusFieldNumber;
const int Alignment::kRefposFieldNumber;
const int Alignment::kReadPairedFieldNumber;
const int Alignment::kReadMappedFieldNumber;
const int Alignment::kMateUnmappedFieldNumber;
const int Alignment::kReadOnReverseStrandFieldNumber;
const int Alignment::kMateOnReverseStrandFieldNumber;
const int Alignment::kSoftClippedFieldNumber;
const int Alignment::kDiscordantInsertSizeFieldNumber;
const int Alignment::kUniquenessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alignment::Alignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Alignment)
}

void Alignment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  path_ = const_cast< ::vg::Path*>(&::vg::Path::default_instance());
  fragment_prev_ = const_cast< ::vg::Alignment*>(&::vg::Alignment::default_instance());
  fragment_next_ = const_cast< ::vg::Alignment*>(&::vg::Alignment::default_instance());
}

Alignment::Alignment(const Alignment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Alignment)
}

void Alignment::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapping_quality_ = 0;
  score_ = 0;
  query_position_ = 0;
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_prev_ = NULL;
  fragment_next_ = NULL;
  is_secondary_ = false;
  identity_ = 0;
  read_paired_ = false;
  read_mapped_ = false;
  mate_unmapped_ = false;
  read_on_reverse_strand_ = false;
  mate_on_reverse_strand_ = false;
  soft_clipped_ = false;
  discordant_insert_size_ = false;
  uniqueness_ = 0;
}

Alignment::~Alignment() {
  // @@protoc_insertion_point(destructor:vg.Alignment)
  SharedDtor();
}

void Alignment::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete path_;
    delete fragment_prev_;
    delete fragment_next_;
  }
}

void Alignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alignment_descriptor_;
}

const Alignment& Alignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Alignment* Alignment::default_instance_ = NULL;

Alignment* Alignment::New(::google::protobuf::Arena* arena) const {
  Alignment* n = new Alignment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Alignment::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Alignment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Alignment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Alignment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mapping_quality_, score_);
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_position_ = 0;
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fragment_prev_ != NULL) delete fragment_prev_;
  fragment_prev_ = NULL;
  if (GetArenaNoVirtual() == NULL && fragment_next_ != NULL) delete fragment_next_;
  fragment_next_ = NULL;
  is_secondary_ = false;
  identity_ = 0;
  ZR_(read_paired_, mate_unmapped_);
  ZR_(uniqueness_, discordant_insert_size_);

#undef ZR_HELPER_
#undef ZR_

  fragment_.Clear();
  locus_.Clear();
  refpos_.Clear();
}

bool Alignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Alignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .vg.Path path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quality;
        break;
      }

      // optional bytes quality = 4;
      case 4: {
        if (tag == 34) {
         parse_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapping_quality;
        break;
      }

      // optional int32 mapping_quality = 5;
      case 5: {
        if (tag == 40) {
         parse_mapping_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int32 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_query_position;
        break;
      }

      // optional int32 query_position = 7;
      case 7: {
        if (tag == 56) {
         parse_query_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sample_name;
        break;
      }

      // optional string sample_name = 9;
      case 9: {
        if (tag == 74) {
         parse_sample_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_name().data(), this->sample_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.sample_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_read_group;
        break;
      }

      // optional string read_group = 10;
      case 10: {
        if (tag == 82) {
         parse_read_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group().data(), this->read_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.read_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fragment_prev;
        break;
      }

      // optional .vg.Alignment fragment_prev = 11;
      case 11: {
        if (tag == 90) {
         parse_fragment_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragment_prev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_fragment_next;
        break;
      }

      // optional .vg.Alignment fragment_next = 12;
      case 12: {
        if (tag == 98) {
         parse_fragment_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragment_next()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_secondary;
        break;
      }

      // optional bool is_secondary = 15;
      case 15: {
        if (tag == 120) {
         parse_is_secondary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secondary_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_identity;
        break;
      }

      // optional double identity = 16;
      case 16: {
        if (tag == 129) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &identity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_fragment;
        break;
      }

      // repeated .vg.Path fragment = 17;
      case 17: {
        if (tag == 138) {
         parse_fragment:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fragment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fragment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_fragment;
        if (input->ExpectTag(146)) goto parse_loop_locus;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Locus locus = 18;
      case 18: {
        if (tag == 146) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_locus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_locus;
        if (input->ExpectTag(154)) goto parse_loop_refpos;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Position refpos = 19;
      case 19: {
        if (tag == 154) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_refpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_refpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_loop_refpos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(160)) goto parse_read_paired;
        break;
      }

      // optional bool read_paired = 20;
      case 20: {
        if (tag == 160) {
         parse_read_paired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_paired_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_read_mapped;
        break;
      }

      // optional bool read_mapped = 21;
      case 21: {
        if (tag == 168) {
         parse_read_mapped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_mapped_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_mate_unmapped;
        break;
      }

      // optional bool mate_unmapped = 22;
      case 22: {
        if (tag == 176) {
         parse_mate_unmapped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mate_unmapped_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_read_on_reverse_strand;
        break;
      }

      // optional bool read_on_reverse_strand = 23;
      case 23: {
        if (tag == 184) {
         parse_read_on_reverse_strand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_on_reverse_strand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_mate_on_reverse_strand;
        break;
      }

      // optional bool mate_on_reverse_strand = 24;
      case 24: {
        if (tag == 192) {
         parse_mate_on_reverse_strand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mate_on_reverse_strand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_soft_clipped;
        break;
      }

      // optional bool soft_clipped = 25;
      case 25: {
        if (tag == 200) {
         parse_soft_clipped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &soft_clipped_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_discordant_insert_size;
        break;
      }

      // optional bool discordant_insert_size = 26;
      case 26: {
        if (tag == 208) {
         parse_discordant_insert_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discordant_insert_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_uniqueness;
        break;
      }

      // optional double uniqueness = 27;
      case 27: {
        if (tag == 217) {
         parse_uniqueness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uniqueness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Alignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Alignment)
  return false;
#undef DO_
}

void Alignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Alignment)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // optional .vg.Path path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional bytes quality = 4;
  if (this->quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->quality(), output);
  }

  // optional int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapping_quality(), output);
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // optional int32 query_position = 7;
  if (this->query_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->query_position(), output);
  }

  // optional string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sample_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sample_name(), output);
  }

  // optional string read_group = 10;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), this->read_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.read_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->read_group(), output);
  }

  // optional .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->fragment_prev_, output);
  }

  // optional .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->fragment_next_, output);
  }

  // optional bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_secondary(), output);
  }

  // optional double identity = 16;
  if (this->identity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->identity(), output);
  }

  // repeated .vg.Path fragment = 17;
  for (unsigned int i = 0, n = this->fragment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->fragment(i), output);
  }

  // repeated .vg.Locus locus = 18;
  for (unsigned int i = 0, n = this->locus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->locus(i), output);
  }

  // repeated .vg.Position refpos = 19;
  for (unsigned int i = 0, n = this->refpos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->refpos(i), output);
  }

  // optional bool read_paired = 20;
  if (this->read_paired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->read_paired(), output);
  }

  // optional bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->read_mapped(), output);
  }

  // optional bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->mate_unmapped(), output);
  }

  // optional bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->read_on_reverse_strand(), output);
  }

  // optional bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->mate_on_reverse_strand(), output);
  }

  // optional bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->soft_clipped(), output);
  }

  // optional bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->discordant_insert_size(), output);
  }

  // optional double uniqueness = 27;
  if (this->uniqueness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->uniqueness(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Alignment)
}

::google::protobuf::uint8* Alignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Alignment)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // optional .vg.Path path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bytes quality = 4;
  if (this->quality().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->quality(), target);
  }

  // optional int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapping_quality(), target);
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // optional int32 query_position = 7;
  if (this->query_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->query_position(), target);
  }

  // optional string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sample_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sample_name(), target);
  }

  // optional string read_group = 10;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), this->read_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.read_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->read_group(), target);
  }

  // optional .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->fragment_prev_, false, target);
  }

  // optional .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->fragment_next_, false, target);
  }

  // optional bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_secondary(), target);
  }

  // optional double identity = 16;
  if (this->identity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->identity(), target);
  }

  // repeated .vg.Path fragment = 17;
  for (unsigned int i = 0, n = this->fragment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->fragment(i), false, target);
  }

  // repeated .vg.Locus locus = 18;
  for (unsigned int i = 0, n = this->locus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->locus(i), false, target);
  }

  // repeated .vg.Position refpos = 19;
  for (unsigned int i = 0, n = this->refpos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->refpos(i), false, target);
  }

  // optional bool read_paired = 20;
  if (this->read_paired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->read_paired(), target);
  }

  // optional bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->read_mapped(), target);
  }

  // optional bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->mate_unmapped(), target);
  }

  // optional bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->read_on_reverse_strand(), target);
  }

  // optional bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->mate_on_reverse_strand(), target);
  }

  // optional bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->soft_clipped(), target);
  }

  // optional bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->discordant_insert_size(), target);
  }

  // optional double uniqueness = 27;
  if (this->uniqueness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->uniqueness(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Alignment)
  return target;
}

int Alignment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Alignment)
  int total_size = 0;

  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional .vg.Path path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bytes quality = 4;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality());
  }

  // optional int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapping_quality());
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // optional int32 query_position = 7;
  if (this->query_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->query_position());
  }

  // optional string sample_name = 9;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  // optional string read_group = 10;
  if (this->read_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group());
  }

  // optional .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fragment_prev_);
  }

  // optional .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fragment_next_);
  }

  // optional bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    total_size += 1 + 1;
  }

  // optional double identity = 16;
  if (this->identity() != 0) {
    total_size += 2 + 8;
  }

  // optional bool read_paired = 20;
  if (this->read_paired() != 0) {
    total_size += 2 + 1;
  }

  // optional bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    total_size += 2 + 1;
  }

  // optional bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    total_size += 2 + 1;
  }

  // optional bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    total_size += 2 + 1;
  }

  // optional bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    total_size += 2 + 1;
  }

  // optional bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    total_size += 2 + 1;
  }

  // optional bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    total_size += 2 + 1;
  }

  // optional double uniqueness = 27;
  if (this->uniqueness() != 0) {
    total_size += 2 + 8;
  }

  // repeated .vg.Path fragment = 17;
  total_size += 2 * this->fragment_size();
  for (int i = 0; i < this->fragment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment(i));
  }

  // repeated .vg.Locus locus = 18;
  total_size += 2 * this->locus_size();
  for (int i = 0; i < this->locus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locus(i));
  }

  // repeated .vg.Position refpos = 19;
  total_size += 2 * this->refpos_size();
  for (int i = 0; i < this->refpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refpos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Alignment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Alignment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Alignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Alignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Alignment)
    MergeFrom(*source);
  }
}

void Alignment::MergeFrom(const Alignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Alignment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fragment_.MergeFrom(from.fragment_);
  locus_.MergeFrom(from.locus_);
  refpos_.MergeFrom(from.refpos_);
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.has_path()) {
    mutable_path()->::vg::Path::MergeFrom(from.path());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.quality().size() > 0) {

    quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  if (from.mapping_quality() != 0) {
    set_mapping_quality(from.mapping_quality());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.query_position() != 0) {
    set_query_position(from.query_position());
  }
  if (from.sample_name().size() > 0) {

    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  if (from.read_group().size() > 0) {

    read_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_);
  }
  if (from.has_fragment_prev()) {
    mutable_fragment_prev()->::vg::Alignment::MergeFrom(from.fragment_prev());
  }
  if (from.has_fragment_next()) {
    mutable_fragment_next()->::vg::Alignment::MergeFrom(from.fragment_next());
  }
  if (from.is_secondary() != 0) {
    set_is_secondary(from.is_secondary());
  }
  if (from.identity() != 0) {
    set_identity(from.identity());
  }
  if (from.read_paired() != 0) {
    set_read_paired(from.read_paired());
  }
  if (from.read_mapped() != 0) {
    set_read_mapped(from.read_mapped());
  }
  if (from.mate_unmapped() != 0) {
    set_mate_unmapped(from.mate_unmapped());
  }
  if (from.read_on_reverse_strand() != 0) {
    set_read_on_reverse_strand(from.read_on_reverse_strand());
  }
  if (from.mate_on_reverse_strand() != 0) {
    set_mate_on_reverse_strand(from.mate_on_reverse_strand());
  }
  if (from.soft_clipped() != 0) {
    set_soft_clipped(from.soft_clipped());
  }
  if (from.discordant_insert_size() != 0) {
    set_discordant_insert_size(from.discordant_insert_size());
  }
  if (from.uniqueness() != 0) {
    set_uniqueness(from.uniqueness());
  }
}

void Alignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Alignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alignment::CopyFrom(const Alignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Alignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alignment::IsInitialized() const {

  return true;
}

void Alignment::Swap(Alignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alignment::InternalSwap(Alignment* other) {
  sequence_.Swap(&other->sequence_);
  std::swap(path_, other->path_);
  name_.Swap(&other->name_);
  quality_.Swap(&other->quality_);
  std::swap(mapping_quality_, other->mapping_quality_);
  std::swap(score_, other->score_);
  std::swap(query_position_, other->query_position_);
  sample_name_.Swap(&other->sample_name_);
  read_group_.Swap(&other->read_group_);
  std::swap(fragment_prev_, other->fragment_prev_);
  std::swap(fragment_next_, other->fragment_next_);
  std::swap(is_secondary_, other->is_secondary_);
  std::swap(identity_, other->identity_);
  fragment_.UnsafeArenaSwap(&other->fragment_);
  locus_.UnsafeArenaSwap(&other->locus_);
  refpos_.UnsafeArenaSwap(&other->refpos_);
  std::swap(read_paired_, other->read_paired_);
  std::swap(read_mapped_, other->read_mapped_);
  std::swap(mate_unmapped_, other->mate_unmapped_);
  std::swap(read_on_reverse_strand_, other->read_on_reverse_strand_);
  std::swap(mate_on_reverse_strand_, other->mate_on_reverse_strand_);
  std::swap(soft_clipped_, other->soft_clipped_);
  std::swap(discordant_insert_size_, other->discordant_insert_size_);
  std::swap(uniqueness_, other->uniqueness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Alignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alignment_descriptor_;
  metadata.reflection = Alignment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Alignment

// optional string sequence = 1;
void Alignment::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::sequence() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.sequence)
}
 void Alignment::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.sequence)
}
 void Alignment::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.sequence)
}
 ::std::string* Alignment::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_sequence() {
  // @@protoc_insertion_point(field_release:vg.Alignment.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.sequence)
}

// optional .vg.Path path = 2;
bool Alignment::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
void Alignment::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::vg::Path& Alignment::path() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::vg::Path* Alignment::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::vg::Path;
  }
  // @@protoc_insertion_point(field_mutable:vg.Alignment.path)
  return path_;
}
::vg::Path* Alignment::release_path() {
  // @@protoc_insertion_point(field_release:vg.Alignment.path)
  
  ::vg::Path* temp = path_;
  path_ = NULL;
  return temp;
}
void Alignment::set_allocated_path(::vg::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.path)
}

// optional string name = 3;
void Alignment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::name() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.name)
}
 void Alignment::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.name)
}
 void Alignment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.name)
}
 ::std::string* Alignment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_name() {
  // @@protoc_insertion_point(field_release:vg.Alignment.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.name)
}

// optional bytes quality = 4;
void Alignment::clear_quality() {
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::quality() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.quality)
  return quality_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_quality(const ::std::string& value) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.quality)
}
 void Alignment::set_quality(const char* value) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.quality)
}
 void Alignment::set_quality(const void* value, size_t size) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.quality)
}
 ::std::string* Alignment::mutable_quality() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.quality)
  return quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_quality() {
  // @@protoc_insertion_point(field_release:vg.Alignment.quality)
  
  return quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_quality(::std::string* quality) {
  if (quality != NULL) {
    
  } else {
    
  }
  quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quality);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.quality)
}

// optional int32 mapping_quality = 5;
void Alignment::clear_mapping_quality() {
  mapping_quality_ = 0;
}
 ::google::protobuf::int32 Alignment::mapping_quality() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.mapping_quality)
  return mapping_quality_;
}
 void Alignment::set_mapping_quality(::google::protobuf::int32 value) {
  
  mapping_quality_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.mapping_quality)
}

// optional int32 score = 6;
void Alignment::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 Alignment::score() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.score)
  return score_;
}
 void Alignment::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.score)
}

// optional int32 query_position = 7;
void Alignment::clear_query_position() {
  query_position_ = 0;
}
 ::google::protobuf::int32 Alignment::query_position() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.query_position)
  return query_position_;
}
 void Alignment::set_query_position(::google::protobuf::int32 value) {
  
  query_position_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.query_position)
}

// optional string sample_name = 9;
void Alignment::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::sample_name() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.sample_name)
  return sample_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_sample_name(const ::std::string& value) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.sample_name)
}
 void Alignment::set_sample_name(const char* value) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.sample_name)
}
 void Alignment::set_sample_name(const char* value, size_t size) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.sample_name)
}
 ::std::string* Alignment::mutable_sample_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.sample_name)
  return sample_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_sample_name() {
  // @@protoc_insertion_point(field_release:vg.Alignment.sample_name)
  
  return sample_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_sample_name(::std::string* sample_name) {
  if (sample_name != NULL) {
    
  } else {
    
  }
  sample_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.sample_name)
}

// optional string read_group = 10;
void Alignment::clear_read_group() {
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Alignment::read_group() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.read_group)
  return read_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_read_group(const ::std::string& value) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Alignment.read_group)
}
 void Alignment::set_read_group(const char* value) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Alignment.read_group)
}
 void Alignment::set_read_group(const char* value, size_t size) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Alignment.read_group)
}
 ::std::string* Alignment::mutable_read_group() {
  
  // @@protoc_insertion_point(field_mutable:vg.Alignment.read_group)
  return read_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Alignment::release_read_group() {
  // @@protoc_insertion_point(field_release:vg.Alignment.read_group)
  
  return read_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Alignment::set_allocated_read_group(::std::string* read_group) {
  if (read_group != NULL) {
    
  } else {
    
  }
  read_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group);
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.read_group)
}

// optional .vg.Alignment fragment_prev = 11;
bool Alignment::has_fragment_prev() const {
  return !_is_default_instance_ && fragment_prev_ != NULL;
}
void Alignment::clear_fragment_prev() {
  if (GetArenaNoVirtual() == NULL && fragment_prev_ != NULL) delete fragment_prev_;
  fragment_prev_ = NULL;
}
const ::vg::Alignment& Alignment::fragment_prev() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.fragment_prev)
  return fragment_prev_ != NULL ? *fragment_prev_ : *default_instance_->fragment_prev_;
}
::vg::Alignment* Alignment::mutable_fragment_prev() {
  
  if (fragment_prev_ == NULL) {
    fragment_prev_ = new ::vg::Alignment;
  }
  // @@protoc_insertion_point(field_mutable:vg.Alignment.fragment_prev)
  return fragment_prev_;
}
::vg::Alignment* Alignment::release_fragment_prev() {
  // @@protoc_insertion_point(field_release:vg.Alignment.fragment_prev)
  
  ::vg::Alignment* temp = fragment_prev_;
  fragment_prev_ = NULL;
  return temp;
}
void Alignment::set_allocated_fragment_prev(::vg::Alignment* fragment_prev) {
  delete fragment_prev_;
  fragment_prev_ = fragment_prev;
  if (fragment_prev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.fragment_prev)
}

// optional .vg.Alignment fragment_next = 12;
bool Alignment::has_fragment_next() const {
  return !_is_default_instance_ && fragment_next_ != NULL;
}
void Alignment::clear_fragment_next() {
  if (GetArenaNoVirtual() == NULL && fragment_next_ != NULL) delete fragment_next_;
  fragment_next_ = NULL;
}
const ::vg::Alignment& Alignment::fragment_next() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.fragment_next)
  return fragment_next_ != NULL ? *fragment_next_ : *default_instance_->fragment_next_;
}
::vg::Alignment* Alignment::mutable_fragment_next() {
  
  if (fragment_next_ == NULL) {
    fragment_next_ = new ::vg::Alignment;
  }
  // @@protoc_insertion_point(field_mutable:vg.Alignment.fragment_next)
  return fragment_next_;
}
::vg::Alignment* Alignment::release_fragment_next() {
  // @@protoc_insertion_point(field_release:vg.Alignment.fragment_next)
  
  ::vg::Alignment* temp = fragment_next_;
  fragment_next_ = NULL;
  return temp;
}
void Alignment::set_allocated_fragment_next(::vg::Alignment* fragment_next) {
  delete fragment_next_;
  fragment_next_ = fragment_next;
  if (fragment_next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Alignment.fragment_next)
}

// optional bool is_secondary = 15;
void Alignment::clear_is_secondary() {
  is_secondary_ = false;
}
 bool Alignment::is_secondary() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.is_secondary)
  return is_secondary_;
}
 void Alignment::set_is_secondary(bool value) {
  
  is_secondary_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.is_secondary)
}

// optional double identity = 16;
void Alignment::clear_identity() {
  identity_ = 0;
}
 double Alignment::identity() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.identity)
  return identity_;
}
 void Alignment::set_identity(double value) {
  
  identity_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.identity)
}

// repeated .vg.Path fragment = 17;
int Alignment::fragment_size() const {
  return fragment_.size();
}
void Alignment::clear_fragment() {
  fragment_.Clear();
}
const ::vg::Path& Alignment::fragment(int index) const {
  // @@protoc_insertion_point(field_get:vg.Alignment.fragment)
  return fragment_.Get(index);
}
::vg::Path* Alignment::mutable_fragment(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Alignment.fragment)
  return fragment_.Mutable(index);
}
::vg::Path* Alignment::add_fragment() {
  // @@protoc_insertion_point(field_add:vg.Alignment.fragment)
  return fragment_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Path >*
Alignment::mutable_fragment() {
  // @@protoc_insertion_point(field_mutable_list:vg.Alignment.fragment)
  return &fragment_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Path >&
Alignment::fragment() const {
  // @@protoc_insertion_point(field_list:vg.Alignment.fragment)
  return fragment_;
}

// repeated .vg.Locus locus = 18;
int Alignment::locus_size() const {
  return locus_.size();
}
void Alignment::clear_locus() {
  locus_.Clear();
}
const ::vg::Locus& Alignment::locus(int index) const {
  // @@protoc_insertion_point(field_get:vg.Alignment.locus)
  return locus_.Get(index);
}
::vg::Locus* Alignment::mutable_locus(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Alignment.locus)
  return locus_.Mutable(index);
}
::vg::Locus* Alignment::add_locus() {
  // @@protoc_insertion_point(field_add:vg.Alignment.locus)
  return locus_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Locus >*
Alignment::mutable_locus() {
  // @@protoc_insertion_point(field_mutable_list:vg.Alignment.locus)
  return &locus_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Locus >&
Alignment::locus() const {
  // @@protoc_insertion_point(field_list:vg.Alignment.locus)
  return locus_;
}

// repeated .vg.Position refpos = 19;
int Alignment::refpos_size() const {
  return refpos_.size();
}
void Alignment::clear_refpos() {
  refpos_.Clear();
}
const ::vg::Position& Alignment::refpos(int index) const {
  // @@protoc_insertion_point(field_get:vg.Alignment.refpos)
  return refpos_.Get(index);
}
::vg::Position* Alignment::mutable_refpos(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Alignment.refpos)
  return refpos_.Mutable(index);
}
::vg::Position* Alignment::add_refpos() {
  // @@protoc_insertion_point(field_add:vg.Alignment.refpos)
  return refpos_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Position >*
Alignment::mutable_refpos() {
  // @@protoc_insertion_point(field_mutable_list:vg.Alignment.refpos)
  return &refpos_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Position >&
Alignment::refpos() const {
  // @@protoc_insertion_point(field_list:vg.Alignment.refpos)
  return refpos_;
}

// optional bool read_paired = 20;
void Alignment::clear_read_paired() {
  read_paired_ = false;
}
 bool Alignment::read_paired() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.read_paired)
  return read_paired_;
}
 void Alignment::set_read_paired(bool value) {
  
  read_paired_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.read_paired)
}

// optional bool read_mapped = 21;
void Alignment::clear_read_mapped() {
  read_mapped_ = false;
}
 bool Alignment::read_mapped() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.read_mapped)
  return read_mapped_;
}
 void Alignment::set_read_mapped(bool value) {
  
  read_mapped_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.read_mapped)
}

// optional bool mate_unmapped = 22;
void Alignment::clear_mate_unmapped() {
  mate_unmapped_ = false;
}
 bool Alignment::mate_unmapped() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.mate_unmapped)
  return mate_unmapped_;
}
 void Alignment::set_mate_unmapped(bool value) {
  
  mate_unmapped_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.mate_unmapped)
}

// optional bool read_on_reverse_strand = 23;
void Alignment::clear_read_on_reverse_strand() {
  read_on_reverse_strand_ = false;
}
 bool Alignment::read_on_reverse_strand() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.read_on_reverse_strand)
  return read_on_reverse_strand_;
}
 void Alignment::set_read_on_reverse_strand(bool value) {
  
  read_on_reverse_strand_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.read_on_reverse_strand)
}

// optional bool mate_on_reverse_strand = 24;
void Alignment::clear_mate_on_reverse_strand() {
  mate_on_reverse_strand_ = false;
}
 bool Alignment::mate_on_reverse_strand() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.mate_on_reverse_strand)
  return mate_on_reverse_strand_;
}
 void Alignment::set_mate_on_reverse_strand(bool value) {
  
  mate_on_reverse_strand_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.mate_on_reverse_strand)
}

// optional bool soft_clipped = 25;
void Alignment::clear_soft_clipped() {
  soft_clipped_ = false;
}
 bool Alignment::soft_clipped() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.soft_clipped)
  return soft_clipped_;
}
 void Alignment::set_soft_clipped(bool value) {
  
  soft_clipped_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.soft_clipped)
}

// optional bool discordant_insert_size = 26;
void Alignment::clear_discordant_insert_size() {
  discordant_insert_size_ = false;
}
 bool Alignment::discordant_insert_size() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.discordant_insert_size)
  return discordant_insert_size_;
}
 void Alignment::set_discordant_insert_size(bool value) {
  
  discordant_insert_size_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.discordant_insert_size)
}

// optional double uniqueness = 27;
void Alignment::clear_uniqueness() {
  uniqueness_ = 0;
}
 double Alignment::uniqueness() const {
  // @@protoc_insertion_point(field_get:vg.Alignment.uniqueness)
  return uniqueness_;
}
 void Alignment::set_uniqueness(double value) {
  
  uniqueness_ = value;
  // @@protoc_insertion_point(field_set:vg.Alignment.uniqueness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultipathAlignment::kSequenceFieldNumber;
const int MultipathAlignment::kQualityFieldNumber;
const int MultipathAlignment::kNameFieldNumber;
const int MultipathAlignment::kSampleNameFieldNumber;
const int MultipathAlignment::kReadGroupFieldNumber;
const int MultipathAlignment::kSubpathFieldNumber;
const int MultipathAlignment::kMappingQualityFieldNumber;
const int MultipathAlignment::kStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultipathAlignment::MultipathAlignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.MultipathAlignment)
}

void MultipathAlignment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultipathAlignment::MultipathAlignment(const MultipathAlignment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.MultipathAlignment)
}

void MultipathAlignment::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapping_quality_ = 0;
}

MultipathAlignment::~MultipathAlignment() {
  // @@protoc_insertion_point(destructor:vg.MultipathAlignment)
  SharedDtor();
}

void MultipathAlignment::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MultipathAlignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultipathAlignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultipathAlignment_descriptor_;
}

const MultipathAlignment& MultipathAlignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

MultipathAlignment* MultipathAlignment::default_instance_ = NULL;

MultipathAlignment* MultipathAlignment::New(::google::protobuf::Arena* arena) const {
  MultipathAlignment* n = new MultipathAlignment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultipathAlignment::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.MultipathAlignment)
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapping_quality_ = 0;
  subpath_.Clear();
  start_.Clear();
}

bool MultipathAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.MultipathAlignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quality;
        break;
      }

      // optional bytes quality = 2;
      case 2: {
        if (tag == 18) {
         parse_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sample_name;
        break;
      }

      // optional string sample_name = 4;
      case 4: {
        if (tag == 34) {
         parse_sample_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_name().data(), this->sample_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.sample_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_read_group;
        break;
      }

      // optional string read_group = 5;
      case 5: {
        if (tag == 42) {
         parse_read_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group().data(), this->read_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.read_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_subpath;
        break;
      }

      // repeated .vg.Subpath subpath = 6;
      case 6: {
        if (tag == 50) {
         parse_subpath:
          DO_(input->IncrementRecursionDepth());
         parse_loop_subpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subpath()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_subpath;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_mapping_quality;
        break;
      }

      // optional int32 mapping_quality = 7;
      case 7: {
        if (tag == 56) {
         parse_mapping_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_start;
        break;
      }

      // repeated uint32 start = 8;
      case 8: {
        if (tag == 66) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_start())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_start())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.MultipathAlignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.MultipathAlignment)
  return false;
#undef DO_
}

void MultipathAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.MultipathAlignment)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // optional bytes quality = 2;
  if (this->quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->quality(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string sample_name = 4;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sample_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sample_name(), output);
  }

  // optional string read_group = 5;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), this->read_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.read_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->read_group(), output);
  }

  // repeated .vg.Subpath subpath = 6;
  for (unsigned int i = 0, n = this->subpath_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subpath(i), output);
  }

  // optional int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapping_quality(), output);
  }

  // repeated uint32 start = 8;
  if (this->start_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_start_cached_byte_size_);
  }
  for (int i = 0; i < this->start_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->start(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.MultipathAlignment)
}

::google::protobuf::uint8* MultipathAlignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.MultipathAlignment)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // optional bytes quality = 2;
  if (this->quality().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->quality(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string sample_name = 4;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), this->sample_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sample_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sample_name(), target);
  }

  // optional string read_group = 5;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), this->read_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.read_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->read_group(), target);
  }

  // repeated .vg.Subpath subpath = 6;
  for (unsigned int i = 0, n = this->subpath_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->subpath(i), false, target);
  }

  // optional int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapping_quality(), target);
  }

  // repeated uint32 start = 8;
  if (this->start_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _start_cached_byte_size_, target);
  }
  for (int i = 0; i < this->start_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->start(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.MultipathAlignment)
  return target;
}

int MultipathAlignment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.MultipathAlignment)
  int total_size = 0;

  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional bytes quality = 2;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string sample_name = 4;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  // optional string read_group = 5;
  if (this->read_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group());
  }

  // optional int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapping_quality());
  }

  // repeated .vg.Subpath subpath = 6;
  total_size += 1 * this->subpath_size();
  for (int i = 0; i < this->subpath_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subpath(i));
  }

  // repeated uint32 start = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->start_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->start(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _start_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultipathAlignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.MultipathAlignment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultipathAlignment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultipathAlignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.MultipathAlignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.MultipathAlignment)
    MergeFrom(*source);
  }
}

void MultipathAlignment::MergeFrom(const MultipathAlignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.MultipathAlignment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  subpath_.MergeFrom(from.subpath_);
  start_.MergeFrom(from.start_);
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.quality().size() > 0) {

    quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sample_name().size() > 0) {

    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  if (from.read_group().size() > 0) {

    read_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_);
  }
  if (from.mapping_quality() != 0) {
    set_mapping_quality(from.mapping_quality());
  }
}

void MultipathAlignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.MultipathAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipathAlignment::CopyFrom(const MultipathAlignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.MultipathAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipathAlignment::IsInitialized() const {

  return true;
}

void MultipathAlignment::Swap(MultipathAlignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultipathAlignment::InternalSwap(MultipathAlignment* other) {
  sequence_.Swap(&other->sequence_);
  quality_.Swap(&other->quality_);
  name_.Swap(&other->name_);
  sample_name_.Swap(&other->sample_name_);
  read_group_.Swap(&other->read_group_);
  subpath_.UnsafeArenaSwap(&other->subpath_);
  std::swap(mapping_quality_, other->mapping_quality_);
  start_.UnsafeArenaSwap(&other->start_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultipathAlignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultipathAlignment_descriptor_;
  metadata.reflection = MultipathAlignment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultipathAlignment

// optional string sequence = 1;
void MultipathAlignment::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultipathAlignment::sequence() const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.MultipathAlignment.sequence)
}
 void MultipathAlignment::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.MultipathAlignment.sequence)
}
 void MultipathAlignment::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.MultipathAlignment.sequence)
}
 ::std::string* MultipathAlignment::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.MultipathAlignment.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultipathAlignment::release_sequence() {
  // @@protoc_insertion_point(field_release:vg.MultipathAlignment.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.MultipathAlignment.sequence)
}

// optional bytes quality = 2;
void MultipathAlignment::clear_quality() {
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultipathAlignment::quality() const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.quality)
  return quality_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_quality(const ::std::string& value) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.MultipathAlignment.quality)
}
 void MultipathAlignment::set_quality(const char* value) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.MultipathAlignment.quality)
}
 void MultipathAlignment::set_quality(const void* value, size_t size) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.MultipathAlignment.quality)
}
 ::std::string* MultipathAlignment::mutable_quality() {
  
  // @@protoc_insertion_point(field_mutable:vg.MultipathAlignment.quality)
  return quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultipathAlignment::release_quality() {
  // @@protoc_insertion_point(field_release:vg.MultipathAlignment.quality)
  
  return quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_allocated_quality(::std::string* quality) {
  if (quality != NULL) {
    
  } else {
    
  }
  quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quality);
  // @@protoc_insertion_point(field_set_allocated:vg.MultipathAlignment.quality)
}

// optional string name = 3;
void MultipathAlignment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultipathAlignment::name() const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.MultipathAlignment.name)
}
 void MultipathAlignment::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.MultipathAlignment.name)
}
 void MultipathAlignment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.MultipathAlignment.name)
}
 ::std::string* MultipathAlignment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.MultipathAlignment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultipathAlignment::release_name() {
  // @@protoc_insertion_point(field_release:vg.MultipathAlignment.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.MultipathAlignment.name)
}

// optional string sample_name = 4;
void MultipathAlignment::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultipathAlignment::sample_name() const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.sample_name)
  return sample_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_sample_name(const ::std::string& value) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.MultipathAlignment.sample_name)
}
 void MultipathAlignment::set_sample_name(const char* value) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.MultipathAlignment.sample_name)
}
 void MultipathAlignment::set_sample_name(const char* value, size_t size) {
  
  sample_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.MultipathAlignment.sample_name)
}
 ::std::string* MultipathAlignment::mutable_sample_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.MultipathAlignment.sample_name)
  return sample_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultipathAlignment::release_sample_name() {
  // @@protoc_insertion_point(field_release:vg.MultipathAlignment.sample_name)
  
  return sample_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_allocated_sample_name(::std::string* sample_name) {
  if (sample_name != NULL) {
    
  } else {
    
  }
  sample_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:vg.MultipathAlignment.sample_name)
}

// optional string read_group = 5;
void MultipathAlignment::clear_read_group() {
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultipathAlignment::read_group() const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.read_group)
  return read_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_read_group(const ::std::string& value) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.MultipathAlignment.read_group)
}
 void MultipathAlignment::set_read_group(const char* value) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.MultipathAlignment.read_group)
}
 void MultipathAlignment::set_read_group(const char* value, size_t size) {
  
  read_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.MultipathAlignment.read_group)
}
 ::std::string* MultipathAlignment::mutable_read_group() {
  
  // @@protoc_insertion_point(field_mutable:vg.MultipathAlignment.read_group)
  return read_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultipathAlignment::release_read_group() {
  // @@protoc_insertion_point(field_release:vg.MultipathAlignment.read_group)
  
  return read_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultipathAlignment::set_allocated_read_group(::std::string* read_group) {
  if (read_group != NULL) {
    
  } else {
    
  }
  read_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_group);
  // @@protoc_insertion_point(field_set_allocated:vg.MultipathAlignment.read_group)
}

// repeated .vg.Subpath subpath = 6;
int MultipathAlignment::subpath_size() const {
  return subpath_.size();
}
void MultipathAlignment::clear_subpath() {
  subpath_.Clear();
}
const ::vg::Subpath& MultipathAlignment::subpath(int index) const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.subpath)
  return subpath_.Get(index);
}
::vg::Subpath* MultipathAlignment::mutable_subpath(int index) {
  // @@protoc_insertion_point(field_mutable:vg.MultipathAlignment.subpath)
  return subpath_.Mutable(index);
}
::vg::Subpath* MultipathAlignment::add_subpath() {
  // @@protoc_insertion_point(field_add:vg.MultipathAlignment.subpath)
  return subpath_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Subpath >*
MultipathAlignment::mutable_subpath() {
  // @@protoc_insertion_point(field_mutable_list:vg.MultipathAlignment.subpath)
  return &subpath_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Subpath >&
MultipathAlignment::subpath() const {
  // @@protoc_insertion_point(field_list:vg.MultipathAlignment.subpath)
  return subpath_;
}

// optional int32 mapping_quality = 7;
void MultipathAlignment::clear_mapping_quality() {
  mapping_quality_ = 0;
}
 ::google::protobuf::int32 MultipathAlignment::mapping_quality() const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.mapping_quality)
  return mapping_quality_;
}
 void MultipathAlignment::set_mapping_quality(::google::protobuf::int32 value) {
  
  mapping_quality_ = value;
  // @@protoc_insertion_point(field_set:vg.MultipathAlignment.mapping_quality)
}

// repeated uint32 start = 8;
int MultipathAlignment::start_size() const {
  return start_.size();
}
void MultipathAlignment::clear_start() {
  start_.Clear();
}
 ::google::protobuf::uint32 MultipathAlignment::start(int index) const {
  // @@protoc_insertion_point(field_get:vg.MultipathAlignment.start)
  return start_.Get(index);
}
 void MultipathAlignment::set_start(int index, ::google::protobuf::uint32 value) {
  start_.Set(index, value);
  // @@protoc_insertion_point(field_set:vg.MultipathAlignment.start)
}
 void MultipathAlignment::add_start(::google::protobuf::uint32 value) {
  start_.Add(value);
  // @@protoc_insertion_point(field_add:vg.MultipathAlignment.start)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MultipathAlignment::start() const {
  // @@protoc_insertion_point(field_list:vg.MultipathAlignment.start)
  return start_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MultipathAlignment::mutable_start() {
  // @@protoc_insertion_point(field_mutable_list:vg.MultipathAlignment.start)
  return &start_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subpath::kPathFieldNumber;
const int Subpath::kNextFieldNumber;
const int Subpath::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subpath::Subpath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Subpath)
}

void Subpath::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  path_ = const_cast< ::vg::Path*>(&::vg::Path::default_instance());
}

Subpath::Subpath(const Subpath& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Subpath)
}

void Subpath::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  path_ = NULL;
  score_ = 0;
}

Subpath::~Subpath() {
  // @@protoc_insertion_point(destructor:vg.Subpath)
  SharedDtor();
}

void Subpath::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
  }
}

void Subpath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subpath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subpath_descriptor_;
}

const Subpath& Subpath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Subpath* Subpath::default_instance_ = NULL;

Subpath* Subpath::New(::google::protobuf::Arena* arena) const {
  Subpath* n = new Subpath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subpath::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Subpath)
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  score_ = 0;
  next_.Clear();
}

bool Subpath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Subpath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vg.Path path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_next;
        break;
      }

      // repeated uint32 next = 2;
      case 2: {
        if (tag == 18) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_next())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_next())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Subpath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Subpath)
  return false;
#undef DO_
}

void Subpath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Subpath)
  // optional .vg.Path path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // repeated uint32 next = 2;
  if (this->next_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_next_cached_byte_size_);
  }
  for (int i = 0; i < this->next_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->next(i), output);
  }

  // optional int32 score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Subpath)
}

::google::protobuf::uint8* Subpath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Subpath)
  // optional .vg.Path path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, false, target);
  }

  // repeated uint32 next = 2;
  if (this->next_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _next_cached_byte_size_, target);
  }
  for (int i = 0; i < this->next_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->next(i), target);
  }

  // optional int32 score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Subpath)
  return target;
}

int Subpath::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Subpath)
  int total_size = 0;

  // optional .vg.Path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // repeated uint32 next = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->next(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _next_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subpath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Subpath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Subpath* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Subpath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Subpath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Subpath)
    MergeFrom(*source);
  }
}

void Subpath::MergeFrom(const Subpath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Subpath)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  next_.MergeFrom(from.next_);
  if (from.has_path()) {
    mutable_path()->::vg::Path::MergeFrom(from.path());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Subpath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subpath::CopyFrom(const Subpath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subpath::IsInitialized() const {

  return true;
}

void Subpath::Swap(Subpath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subpath::InternalSwap(Subpath* other) {
  std::swap(path_, other->path_);
  next_.UnsafeArenaSwap(&other->next_);
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subpath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subpath_descriptor_;
  metadata.reflection = Subpath_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subpath

// optional .vg.Path path = 1;
bool Subpath::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
void Subpath::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::vg::Path& Subpath::path() const {
  // @@protoc_insertion_point(field_get:vg.Subpath.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::vg::Path* Subpath::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::vg::Path;
  }
  // @@protoc_insertion_point(field_mutable:vg.Subpath.path)
  return path_;
}
::vg::Path* Subpath::release_path() {
  // @@protoc_insertion_point(field_release:vg.Subpath.path)
  
  ::vg::Path* temp = path_;
  path_ = NULL;
  return temp;
}
void Subpath::set_allocated_path(::vg::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Subpath.path)
}

// repeated uint32 next = 2;
int Subpath::next_size() const {
  return next_.size();
}
void Subpath::clear_next() {
  next_.Clear();
}
 ::google::protobuf::uint32 Subpath::next(int index) const {
  // @@protoc_insertion_point(field_get:vg.Subpath.next)
  return next_.Get(index);
}
 void Subpath::set_next(int index, ::google::protobuf::uint32 value) {
  next_.Set(index, value);
  // @@protoc_insertion_point(field_set:vg.Subpath.next)
}
 void Subpath::add_next(::google::protobuf::uint32 value) {
  next_.Add(value);
  // @@protoc_insertion_point(field_add:vg.Subpath.next)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Subpath::next() const {
  // @@protoc_insertion_point(field_list:vg.Subpath.next)
  return next_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Subpath::mutable_next() {
  // @@protoc_insertion_point(field_mutable_list:vg.Subpath.next)
  return &next_;
}

// optional int32 score = 3;
void Subpath::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 Subpath::score() const {
  // @@protoc_insertion_point(field_get:vg.Subpath.score)
  return score_;
}
 void Subpath::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:vg.Subpath.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KmerMatch::kSequenceFieldNumber;
const int KmerMatch::kNodeIdFieldNumber;
const int KmerMatch::kPositionFieldNumber;
const int KmerMatch::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KmerMatch::KmerMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.KmerMatch)
}

void KmerMatch::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KmerMatch::KmerMatch(const KmerMatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.KmerMatch)
}

void KmerMatch::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  backward_ = false;
}

KmerMatch::~KmerMatch() {
  // @@protoc_insertion_point(destructor:vg.KmerMatch)
  SharedDtor();
}

void KmerMatch::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KmerMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KmerMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KmerMatch_descriptor_;
}

const KmerMatch& KmerMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

KmerMatch* KmerMatch::default_instance_ = NULL;

KmerMatch* KmerMatch::New(::google::protobuf::Arena* arena) const {
  KmerMatch* n = new KmerMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KmerMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.KmerMatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KmerMatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KmerMatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, backward_);
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool KmerMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.KmerMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.KmerMatch.sequence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional int64 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional sint32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_backward;
        break;
      }

      // optional bool backward = 4;
      case 4: {
        if (tag == 32) {
         parse_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.KmerMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.KmerMatch)
  return false;
#undef DO_
}

void KmerMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.KmerMatch)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.KmerMatch.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // optional int64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->node_id(), output);
  }

  // optional sint32 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->position(), output);
  }

  // optional bool backward = 4;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->backward(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.KmerMatch)
}

::google::protobuf::uint8* KmerMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.KmerMatch)
  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.KmerMatch.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // optional int64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->node_id(), target);
  }

  // optional sint32 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->position(), target);
  }

  // optional bool backward = 4;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->backward(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.KmerMatch)
  return target;
}

int KmerMatch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.KmerMatch)
  int total_size = 0;

  // optional string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // optional int64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // optional sint32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->position());
  }

  // optional bool backward = 4;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KmerMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.KmerMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KmerMatch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KmerMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.KmerMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.KmerMatch)
    MergeFrom(*source);
  }
}

void KmerMatch::MergeFrom(const KmerMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.KmerMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
}

void KmerMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.KmerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KmerMatch::CopyFrom(const KmerMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.KmerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KmerMatch::IsInitialized() const {

  return true;
}

void KmerMatch::Swap(KmerMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KmerMatch::InternalSwap(KmerMatch* other) {
  sequence_.Swap(&other->sequence_);
  std::swap(node_id_, other->node_id_);
  std::swap(position_, other->position_);
  std::swap(backward_, other->backward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KmerMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KmerMatch_descriptor_;
  metadata.reflection = KmerMatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KmerMatch

// optional string sequence = 1;
void KmerMatch::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KmerMatch::sequence() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.sequence)
  return sequence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KmerMatch::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.KmerMatch.sequence)
}
 void KmerMatch::set_sequence(const char* value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.KmerMatch.sequence)
}
 void KmerMatch::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.KmerMatch.sequence)
}
 ::std::string* KmerMatch::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:vg.KmerMatch.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KmerMatch::release_sequence() {
  // @@protoc_insertion_point(field_release:vg.KmerMatch.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KmerMatch::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:vg.KmerMatch.sequence)
}

// optional int64 node_id = 2;
void KmerMatch::clear_node_id() {
  node_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 KmerMatch::node_id() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.node_id)
  return node_id_;
}
 void KmerMatch::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:vg.KmerMatch.node_id)
}

// optional sint32 position = 3;
void KmerMatch::clear_position() {
  position_ = 0;
}
 ::google::protobuf::int32 KmerMatch::position() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.position)
  return position_;
}
 void KmerMatch::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:vg.KmerMatch.position)
}

// optional bool backward = 4;
void KmerMatch::clear_backward() {
  backward_ = false;
}
 bool KmerMatch::backward() const {
  // @@protoc_insertion_point(field_get:vg.KmerMatch.backward)
  return backward_;
}
 void KmerMatch::set_backward(bool value) {
  
  backward_ = value;
  // @@protoc_insertion_point(field_set:vg.KmerMatch.backward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasePileup::kRefBaseFieldNumber;
const int BasePileup::kNumBasesFieldNumber;
const int BasePileup::kBasesFieldNumber;
const int BasePileup::kQualitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasePileup::BasePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.BasePileup)
}

void BasePileup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BasePileup::BasePileup(const BasePileup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.BasePileup)
}

void BasePileup::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ref_base_ = 0;
  num_bases_ = 0;
  bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BasePileup::~BasePileup() {
  // @@protoc_insertion_point(destructor:vg.BasePileup)
  SharedDtor();
}

void BasePileup::SharedDtor() {
  bases_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BasePileup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasePileup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasePileup_descriptor_;
}

const BasePileup& BasePileup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

BasePileup* BasePileup::default_instance_ = NULL;

BasePileup* BasePileup::New(::google::protobuf::Arena* arena) const {
  BasePileup* n = new BasePileup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.BasePileup)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BasePileup, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BasePileup*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ref_base_, num_bases_);
  bases_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BasePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.BasePileup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ref_base = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_base_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_bases;
        break;
      }

      // optional int32 num_bases = 2;
      case 2: {
        if (tag == 16) {
         parse_num_bases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_bases_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bases;
        break;
      }

      // optional string bases = 3;
      case 3: {
        if (tag == 26) {
         parse_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bases().data(), this->bases().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.BasePileup.bases"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_qualities;
        break;
      }

      // optional bytes qualities = 4;
      case 4: {
        if (tag == 34) {
         parse_qualities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.BasePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.BasePileup)
  return false;
#undef DO_
}

void BasePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.BasePileup)
  // optional int32 ref_base = 1;
  if (this->ref_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ref_base(), output);
  }

  // optional int32 num_bases = 2;
  if (this->num_bases() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_bases(), output);
  }

  // optional string bases = 3;
  if (this->bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), this->bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.BasePileup.bases");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bases(), output);
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->qualities(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.BasePileup)
}

::google::protobuf::uint8* BasePileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.BasePileup)
  // optional int32 ref_base = 1;
  if (this->ref_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ref_base(), target);
  }

  // optional int32 num_bases = 2;
  if (this->num_bases() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_bases(), target);
  }

  // optional string bases = 3;
  if (this->bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), this->bases().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.BasePileup.bases");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bases(), target);
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->qualities(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.BasePileup)
  return target;
}

int BasePileup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.BasePileup)
  int total_size = 0;

  // optional int32 ref_base = 1;
  if (this->ref_base() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ref_base());
  }

  // optional int32 num_bases = 2;
  if (this->num_bases() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_bases());
  }

  // optional string bases = 3;
  if (this->bases().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bases());
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->qualities());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasePileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.BasePileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BasePileup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BasePileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.BasePileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.BasePileup)
    MergeFrom(*source);
  }
}

void BasePileup::MergeFrom(const BasePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.BasePileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ref_base() != 0) {
    set_ref_base(from.ref_base());
  }
  if (from.num_bases() != 0) {
    set_num_bases(from.num_bases());
  }
  if (from.bases().size() > 0) {

    bases_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bases_);
  }
  if (from.qualities().size() > 0) {

    qualities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualities_);
  }
}

void BasePileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.BasePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasePileup::CopyFrom(const BasePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.BasePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePileup::IsInitialized() const {

  return true;
}

void BasePileup::Swap(BasePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasePileup::InternalSwap(BasePileup* other) {
  std::swap(ref_base_, other->ref_base_);
  std::swap(num_bases_, other->num_bases_);
  bases_.Swap(&other->bases_);
  qualities_.Swap(&other->qualities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasePileup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasePileup_descriptor_;
  metadata.reflection = BasePileup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasePileup

// optional int32 ref_base = 1;
void BasePileup::clear_ref_base() {
  ref_base_ = 0;
}
 ::google::protobuf::int32 BasePileup::ref_base() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.ref_base)
  return ref_base_;
}
 void BasePileup::set_ref_base(::google::protobuf::int32 value) {
  
  ref_base_ = value;
  // @@protoc_insertion_point(field_set:vg.BasePileup.ref_base)
}

// optional int32 num_bases = 2;
void BasePileup::clear_num_bases() {
  num_bases_ = 0;
}
 ::google::protobuf::int32 BasePileup::num_bases() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.num_bases)
  return num_bases_;
}
 void BasePileup::set_num_bases(::google::protobuf::int32 value) {
  
  num_bases_ = value;
  // @@protoc_insertion_point(field_set:vg.BasePileup.num_bases)
}

// optional string bases = 3;
void BasePileup::clear_bases() {
  bases_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BasePileup::bases() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.bases)
  return bases_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_bases(const ::std::string& value) {
  
  bases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.BasePileup.bases)
}
 void BasePileup::set_bases(const char* value) {
  
  bases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.BasePileup.bases)
}
 void BasePileup::set_bases(const char* value, size_t size) {
  
  bases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.BasePileup.bases)
}
 ::std::string* BasePileup::mutable_bases() {
  
  // @@protoc_insertion_point(field_mutable:vg.BasePileup.bases)
  return bases_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BasePileup::release_bases() {
  // @@protoc_insertion_point(field_release:vg.BasePileup.bases)
  
  return bases_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_allocated_bases(::std::string* bases) {
  if (bases != NULL) {
    
  } else {
    
  }
  bases_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bases);
  // @@protoc_insertion_point(field_set_allocated:vg.BasePileup.bases)
}

// optional bytes qualities = 4;
void BasePileup::clear_qualities() {
  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BasePileup::qualities() const {
  // @@protoc_insertion_point(field_get:vg.BasePileup.qualities)
  return qualities_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_qualities(const ::std::string& value) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.BasePileup.qualities)
}
 void BasePileup::set_qualities(const char* value) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.BasePileup.qualities)
}
 void BasePileup::set_qualities(const void* value, size_t size) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.BasePileup.qualities)
}
 ::std::string* BasePileup::mutable_qualities() {
  
  // @@protoc_insertion_point(field_mutable:vg.BasePileup.qualities)
  return qualities_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BasePileup::release_qualities() {
  // @@protoc_insertion_point(field_release:vg.BasePileup.qualities)
  
  return qualities_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasePileup::set_allocated_qualities(::std::string* qualities) {
  if (qualities != NULL) {
    
  } else {
    
  }
  qualities_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qualities);
  // @@protoc_insertion_point(field_set_allocated:vg.BasePileup.qualities)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodePileup::kNodeIdFieldNumber;
const int NodePileup::kBasePileupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodePileup::NodePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.NodePileup)
}

void NodePileup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodePileup::NodePileup(const NodePileup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.NodePileup)
}

void NodePileup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = GOOGLE_LONGLONG(0);
}

NodePileup::~NodePileup() {
  // @@protoc_insertion_point(destructor:vg.NodePileup)
  SharedDtor();
}

void NodePileup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodePileup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodePileup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodePileup_descriptor_;
}

const NodePileup& NodePileup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

NodePileup* NodePileup::default_instance_ = NULL;

NodePileup* NodePileup::New(::google::protobuf::Arena* arena) const {
  NodePileup* n = new NodePileup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.NodePileup)
  node_id_ = GOOGLE_LONGLONG(0);
  base_pileup_.Clear();
}

bool NodePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.NodePileup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_pileup;
        break;
      }

      // repeated .vg.BasePileup base_pileup = 2;
      case 2: {
        if (tag == 18) {
         parse_base_pileup:
          DO_(input->IncrementRecursionDepth());
         parse_loop_base_pileup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_base_pileup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_base_pileup;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.NodePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.NodePileup)
  return false;
#undef DO_
}

void NodePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.NodePileup)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // repeated .vg.BasePileup base_pileup = 2;
  for (unsigned int i = 0, n = this->base_pileup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_pileup(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.NodePileup)
}

::google::protobuf::uint8* NodePileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.NodePileup)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // repeated .vg.BasePileup base_pileup = 2;
  for (unsigned int i = 0, n = this->base_pileup_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->base_pileup(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.NodePileup)
  return target;
}

int NodePileup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.NodePileup)
  int total_size = 0;

  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // repeated .vg.BasePileup base_pileup = 2;
  total_size += 1 * this->base_pileup_size();
  for (int i = 0; i < this->base_pileup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_pileup(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodePileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.NodePileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodePileup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodePileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.NodePileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.NodePileup)
    MergeFrom(*source);
  }
}

void NodePileup::MergeFrom(const NodePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.NodePileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  base_pileup_.MergeFrom(from.base_pileup_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodePileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.NodePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePileup::CopyFrom(const NodePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.NodePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePileup::IsInitialized() const {

  return true;
}

void NodePileup::Swap(NodePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodePileup::InternalSwap(NodePileup* other) {
  std::swap(node_id_, other->node_id_);
  base_pileup_.UnsafeArenaSwap(&other->base_pileup_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodePileup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodePileup_descriptor_;
  metadata.reflection = NodePileup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodePileup

// optional int64 node_id = 1;
void NodePileup::clear_node_id() {
  node_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NodePileup::node_id() const {
  // @@protoc_insertion_point(field_get:vg.NodePileup.node_id)
  return node_id_;
}
 void NodePileup::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:vg.NodePileup.node_id)
}

// repeated .vg.BasePileup base_pileup = 2;
int NodePileup::base_pileup_size() const {
  return base_pileup_.size();
}
void NodePileup::clear_base_pileup() {
  base_pileup_.Clear();
}
const ::vg::BasePileup& NodePileup::base_pileup(int index) const {
  // @@protoc_insertion_point(field_get:vg.NodePileup.base_pileup)
  return base_pileup_.Get(index);
}
::vg::BasePileup* NodePileup::mutable_base_pileup(int index) {
  // @@protoc_insertion_point(field_mutable:vg.NodePileup.base_pileup)
  return base_pileup_.Mutable(index);
}
::vg::BasePileup* NodePileup::add_base_pileup() {
  // @@protoc_insertion_point(field_add:vg.NodePileup.base_pileup)
  return base_pileup_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::BasePileup >*
NodePileup::mutable_base_pileup() {
  // @@protoc_insertion_point(field_mutable_list:vg.NodePileup.base_pileup)
  return &base_pileup_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::BasePileup >&
NodePileup::base_pileup() const {
  // @@protoc_insertion_point(field_list:vg.NodePileup.base_pileup)
  return base_pileup_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgePileup::kEdgeFieldNumber;
const int EdgePileup::kNumReadsFieldNumber;
const int EdgePileup::kNumForwardReadsFieldNumber;
const int EdgePileup::kQualitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgePileup::EdgePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.EdgePileup)
}

void EdgePileup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  edge_ = const_cast< ::vg::Edge*>(&::vg::Edge::default_instance());
}

EdgePileup::EdgePileup(const EdgePileup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.EdgePileup)
}

void EdgePileup::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  edge_ = NULL;
  num_reads_ = 0;
  num_forward_reads_ = 0;
  qualities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EdgePileup::~EdgePileup() {
  // @@protoc_insertion_point(destructor:vg.EdgePileup)
  SharedDtor();
}

void EdgePileup::SharedDtor() {
  qualities_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete edge_;
  }
}

void EdgePileup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgePileup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgePileup_descriptor_;
}

const EdgePileup& EdgePileup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

EdgePileup* EdgePileup::default_instance_ = NULL;

EdgePileup* EdgePileup::New(::google::protobuf::Arena* arena) const {
  EdgePileup* n = new EdgePileup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.EdgePileup)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EdgePileup, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EdgePileup*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_reads_, num_forward_reads_);
  if (GetArenaNoVirtual() == NULL && edge_ != NULL) delete edge_;
  edge_ = NULL;
  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool EdgePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.EdgePileup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vg.Edge edge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_reads;
        break;
      }

      // optional int32 num_reads = 2;
      case 2: {
        if (tag == 16) {
         parse_num_reads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_forward_reads;
        break;
      }

      // optional int32 num_forward_reads = 3;
      case 3: {
        if (tag == 24) {
         parse_num_forward_reads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_forward_reads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_qualities;
        break;
      }

      // optional bytes qualities = 4;
      case 4: {
        if (tag == 34) {
         parse_qualities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.EdgePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.EdgePileup)
  return false;
#undef DO_
}

void EdgePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.EdgePileup)
  // optional .vg.Edge edge = 1;
  if (this->has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->edge_, output);
  }

  // optional int32 num_reads = 2;
  if (this->num_reads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_reads(), output);
  }

  // optional int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_forward_reads(), output);
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->qualities(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.EdgePileup)
}

::google::protobuf::uint8* EdgePileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.EdgePileup)
  // optional .vg.Edge edge = 1;
  if (this->has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->edge_, false, target);
  }

  // optional int32 num_reads = 2;
  if (this->num_reads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_reads(), target);
  }

  // optional int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_forward_reads(), target);
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->qualities(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.EdgePileup)
  return target;
}

int EdgePileup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.EdgePileup)
  int total_size = 0;

  // optional .vg.Edge edge = 1;
  if (this->has_edge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->edge_);
  }

  // optional int32 num_reads = 2;
  if (this->num_reads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_reads());
  }

  // optional int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_forward_reads());
  }

  // optional bytes qualities = 4;
  if (this->qualities().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->qualities());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgePileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.EdgePileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EdgePileup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgePileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.EdgePileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.EdgePileup)
    MergeFrom(*source);
  }
}

void EdgePileup::MergeFrom(const EdgePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.EdgePileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_edge()) {
    mutable_edge()->::vg::Edge::MergeFrom(from.edge());
  }
  if (from.num_reads() != 0) {
    set_num_reads(from.num_reads());
  }
  if (from.num_forward_reads() != 0) {
    set_num_forward_reads(from.num_forward_reads());
  }
  if (from.qualities().size() > 0) {

    qualities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualities_);
  }
}

void EdgePileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.EdgePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgePileup::CopyFrom(const EdgePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.EdgePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePileup::IsInitialized() const {

  return true;
}

void EdgePileup::Swap(EdgePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgePileup::InternalSwap(EdgePileup* other) {
  std::swap(edge_, other->edge_);
  std::swap(num_reads_, other->num_reads_);
  std::swap(num_forward_reads_, other->num_forward_reads_);
  qualities_.Swap(&other->qualities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgePileup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgePileup_descriptor_;
  metadata.reflection = EdgePileup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgePileup

// optional .vg.Edge edge = 1;
bool EdgePileup::has_edge() const {
  return !_is_default_instance_ && edge_ != NULL;
}
void EdgePileup::clear_edge() {
  if (GetArenaNoVirtual() == NULL && edge_ != NULL) delete edge_;
  edge_ = NULL;
}
const ::vg::Edge& EdgePileup::edge() const {
  // @@protoc_insertion_point(field_get:vg.EdgePileup.edge)
  return edge_ != NULL ? *edge_ : *default_instance_->edge_;
}
::vg::Edge* EdgePileup::mutable_edge() {
  
  if (edge_ == NULL) {
    edge_ = new ::vg::Edge;
  }
  // @@protoc_insertion_point(field_mutable:vg.EdgePileup.edge)
  return edge_;
}
::vg::Edge* EdgePileup::release_edge() {
  // @@protoc_insertion_point(field_release:vg.EdgePileup.edge)
  
  ::vg::Edge* temp = edge_;
  edge_ = NULL;
  return temp;
}
void EdgePileup::set_allocated_edge(::vg::Edge* edge) {
  delete edge_;
  edge_ = edge;
  if (edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.EdgePileup.edge)
}

// optional int32 num_reads = 2;
void EdgePileup::clear_num_reads() {
  num_reads_ = 0;
}
 ::google::protobuf::int32 EdgePileup::num_reads() const {
  // @@protoc_insertion_point(field_get:vg.EdgePileup.num_reads)
  return num_reads_;
}
 void EdgePileup::set_num_reads(::google::protobuf::int32 value) {
  
  num_reads_ = value;
  // @@protoc_insertion_point(field_set:vg.EdgePileup.num_reads)
}

// optional int32 num_forward_reads = 3;
void EdgePileup::clear_num_forward_reads() {
  num_forward_reads_ = 0;
}
 ::google::protobuf::int32 EdgePileup::num_forward_reads() const {
  // @@protoc_insertion_point(field_get:vg.EdgePileup.num_forward_reads)
  return num_forward_reads_;
}
 void EdgePileup::set_num_forward_reads(::google::protobuf::int32 value) {
  
  num_forward_reads_ = value;
  // @@protoc_insertion_point(field_set:vg.EdgePileup.num_forward_reads)
}

// optional bytes qualities = 4;
void EdgePileup::clear_qualities() {
  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EdgePileup::qualities() const {
  // @@protoc_insertion_point(field_get:vg.EdgePileup.qualities)
  return qualities_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EdgePileup::set_qualities(const ::std::string& value) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.EdgePileup.qualities)
}
 void EdgePileup::set_qualities(const char* value) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.EdgePileup.qualities)
}
 void EdgePileup::set_qualities(const void* value, size_t size) {
  
  qualities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.EdgePileup.qualities)
}
 ::std::string* EdgePileup::mutable_qualities() {
  
  // @@protoc_insertion_point(field_mutable:vg.EdgePileup.qualities)
  return qualities_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EdgePileup::release_qualities() {
  // @@protoc_insertion_point(field_release:vg.EdgePileup.qualities)
  
  return qualities_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EdgePileup::set_allocated_qualities(::std::string* qualities) {
  if (qualities != NULL) {
    
  } else {
    
  }
  qualities_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qualities);
  // @@protoc_insertion_point(field_set_allocated:vg.EdgePileup.qualities)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pileup::kNodePileupsFieldNumber;
const int Pileup::kEdgePileupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pileup::Pileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Pileup)
}

void Pileup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Pileup::Pileup(const Pileup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Pileup)
}

void Pileup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Pileup::~Pileup() {
  // @@protoc_insertion_point(destructor:vg.Pileup)
  SharedDtor();
}

void Pileup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pileup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pileup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pileup_descriptor_;
}

const Pileup& Pileup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Pileup* Pileup::default_instance_ = NULL;

Pileup* Pileup::New(::google::protobuf::Arena* arena) const {
  Pileup* n = new Pileup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Pileup)
  node_pileups_.Clear();
  edge_pileups_.Clear();
}

bool Pileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Pileup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.NodePileup node_pileups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_pileups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_pileups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node_pileups;
        if (input->ExpectTag(18)) goto parse_loop_edge_pileups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.EdgePileup edge_pileups = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edge_pileups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edge_pileups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_edge_pileups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Pileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Pileup)
  return false;
#undef DO_
}

void Pileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Pileup)
  // repeated .vg.NodePileup node_pileups = 1;
  for (unsigned int i = 0, n = this->node_pileups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_pileups(i), output);
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  for (unsigned int i = 0, n = this->edge_pileups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edge_pileups(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Pileup)
}

::google::protobuf::uint8* Pileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Pileup)
  // repeated .vg.NodePileup node_pileups = 1;
  for (unsigned int i = 0, n = this->node_pileups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node_pileups(i), false, target);
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  for (unsigned int i = 0, n = this->edge_pileups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edge_pileups(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Pileup)
  return target;
}

int Pileup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Pileup)
  int total_size = 0;

  // repeated .vg.NodePileup node_pileups = 1;
  total_size += 1 * this->node_pileups_size();
  for (int i = 0; i < this->node_pileups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_pileups(i));
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  total_size += 1 * this->edge_pileups_size();
  for (int i = 0; i < this->edge_pileups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge_pileups(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Pileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pileup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Pileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Pileup)
    MergeFrom(*source);
  }
}

void Pileup::MergeFrom(const Pileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Pileup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_pileups_.MergeFrom(from.node_pileups_);
  edge_pileups_.MergeFrom(from.edge_pileups_);
}

void Pileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Pileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pileup::CopyFrom(const Pileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Pileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pileup::IsInitialized() const {

  return true;
}

void Pileup::Swap(Pileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pileup::InternalSwap(Pileup* other) {
  node_pileups_.UnsafeArenaSwap(&other->node_pileups_);
  edge_pileups_.UnsafeArenaSwap(&other->edge_pileups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pileup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pileup_descriptor_;
  metadata.reflection = Pileup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pileup

// repeated .vg.NodePileup node_pileups = 1;
int Pileup::node_pileups_size() const {
  return node_pileups_.size();
}
void Pileup::clear_node_pileups() {
  node_pileups_.Clear();
}
const ::vg::NodePileup& Pileup::node_pileups(int index) const {
  // @@protoc_insertion_point(field_get:vg.Pileup.node_pileups)
  return node_pileups_.Get(index);
}
::vg::NodePileup* Pileup::mutable_node_pileups(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Pileup.node_pileups)
  return node_pileups_.Mutable(index);
}
::vg::NodePileup* Pileup::add_node_pileups() {
  // @@protoc_insertion_point(field_add:vg.Pileup.node_pileups)
  return node_pileups_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::NodePileup >*
Pileup::mutable_node_pileups() {
  // @@protoc_insertion_point(field_mutable_list:vg.Pileup.node_pileups)
  return &node_pileups_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::NodePileup >&
Pileup::node_pileups() const {
  // @@protoc_insertion_point(field_list:vg.Pileup.node_pileups)
  return node_pileups_;
}

// repeated .vg.EdgePileup edge_pileups = 2;
int Pileup::edge_pileups_size() const {
  return edge_pileups_.size();
}
void Pileup::clear_edge_pileups() {
  edge_pileups_.Clear();
}
const ::vg::EdgePileup& Pileup::edge_pileups(int index) const {
  // @@protoc_insertion_point(field_get:vg.Pileup.edge_pileups)
  return edge_pileups_.Get(index);
}
::vg::EdgePileup* Pileup::mutable_edge_pileups(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Pileup.edge_pileups)
  return edge_pileups_.Mutable(index);
}
::vg::EdgePileup* Pileup::add_edge_pileups() {
  // @@protoc_insertion_point(field_add:vg.Pileup.edge_pileups)
  return edge_pileups_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::EdgePileup >*
Pileup::mutable_edge_pileups() {
  // @@protoc_insertion_point(field_mutable_list:vg.Pileup.edge_pileups)
  return &edge_pileups_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::EdgePileup >&
Pileup::edge_pileups() const {
  // @@protoc_insertion_point(field_list:vg.Pileup.edge_pileups)
  return edge_pileups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snarl::kTypeFieldNumber;
const int Snarl::kStartFieldNumber;
const int Snarl::kEndFieldNumber;
const int Snarl::kParentFieldNumber;
const int Snarl::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snarl::Snarl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Snarl)
}

void Snarl::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  start_ = const_cast< ::vg::Visit*>(&::vg::Visit::default_instance());
  end_ = const_cast< ::vg::Visit*>(&::vg::Visit::default_instance());
  parent_ = const_cast< ::vg::Snarl*>(&::vg::Snarl::default_instance());
}

Snarl::Snarl(const Snarl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Snarl)
}

void Snarl::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  start_ = NULL;
  end_ = NULL;
  parent_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Snarl::~Snarl() {
  // @@protoc_insertion_point(destructor:vg.Snarl)
  SharedDtor();
}

void Snarl::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete start_;
    delete end_;
    delete parent_;
  }
}

void Snarl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snarl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snarl_descriptor_;
}

const Snarl& Snarl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Snarl* Snarl::default_instance_ = NULL;

Snarl* Snarl::New(::google::protobuf::Arena* arena) const {
  Snarl* n = new Snarl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Snarl::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Snarl)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
  if (GetArenaNoVirtual() == NULL && parent_ != NULL) delete parent_;
  parent_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Snarl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Snarl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vg.SnarlType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vg::SnarlType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // optional .vg.Visit start = 2;
      case 2: {
        if (tag == 18) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end;
        break;
      }

      // optional .vg.Visit end = 3;
      case 3: {
        if (tag == 26) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parent;
        break;
      }

      // optional .vg.Snarl parent = 4;
      case 4: {
        if (tag == 34) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Snarl.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Snarl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Snarl)
  return false;
#undef DO_
}

void Snarl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Snarl)
  // optional .vg.SnarlType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .vg.Visit start = 2;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_, output);
  }

  // optional .vg.Visit end = 3;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->end_, output);
  }

  // optional .vg.Snarl parent = 4;
  if (this->has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parent_, output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Snarl.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Snarl)
}

::google::protobuf::uint8* Snarl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Snarl)
  // optional .vg.SnarlType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .vg.Visit start = 2;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->start_, false, target);
  }

  // optional .vg.Visit end = 3;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->end_, false, target);
  }

  // optional .vg.Snarl parent = 4;
  if (this->has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->parent_, false, target);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Snarl.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Snarl)
  return target;
}

int Snarl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Snarl)
  int total_size = 0;

  // optional .vg.SnarlType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .vg.Visit start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  // optional .vg.Visit end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  // optional .vg.Snarl parent = 4;
  if (this->has_parent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parent_);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snarl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Snarl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Snarl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Snarl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Snarl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Snarl)
    MergeFrom(*source);
  }
}

void Snarl::MergeFrom(const Snarl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Snarl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_start()) {
    mutable_start()->::vg::Visit::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::vg::Visit::MergeFrom(from.end());
  }
  if (from.has_parent()) {
    mutable_parent()->::vg::Snarl::MergeFrom(from.parent());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Snarl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Snarl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snarl::CopyFrom(const Snarl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Snarl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snarl::IsInitialized() const {

  return true;
}

void Snarl::Swap(Snarl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snarl::InternalSwap(Snarl* other) {
  std::swap(type_, other->type_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(parent_, other->parent_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Snarl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snarl_descriptor_;
  metadata.reflection = Snarl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Snarl

// optional .vg.SnarlType type = 1;
void Snarl::clear_type() {
  type_ = 0;
}
 ::vg::SnarlType Snarl::type() const {
  // @@protoc_insertion_point(field_get:vg.Snarl.type)
  return static_cast< ::vg::SnarlType >(type_);
}
 void Snarl::set_type(::vg::SnarlType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:vg.Snarl.type)
}

// optional .vg.Visit start = 2;
bool Snarl::has_start() const {
  return !_is_default_instance_ && start_ != NULL;
}
void Snarl::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::vg::Visit& Snarl::start() const {
  // @@protoc_insertion_point(field_get:vg.Snarl.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
::vg::Visit* Snarl::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::vg::Visit;
  }
  // @@protoc_insertion_point(field_mutable:vg.Snarl.start)
  return start_;
}
::vg::Visit* Snarl::release_start() {
  // @@protoc_insertion_point(field_release:vg.Snarl.start)
  
  ::vg::Visit* temp = start_;
  start_ = NULL;
  return temp;
}
void Snarl::set_allocated_start(::vg::Visit* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Snarl.start)
}

// optional .vg.Visit end = 3;
bool Snarl::has_end() const {
  return !_is_default_instance_ && end_ != NULL;
}
void Snarl::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::vg::Visit& Snarl::end() const {
  // @@protoc_insertion_point(field_get:vg.Snarl.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
::vg::Visit* Snarl::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::vg::Visit;
  }
  // @@protoc_insertion_point(field_mutable:vg.Snarl.end)
  return end_;
}
::vg::Visit* Snarl::release_end() {
  // @@protoc_insertion_point(field_release:vg.Snarl.end)
  
  ::vg::Visit* temp = end_;
  end_ = NULL;
  return temp;
}
void Snarl::set_allocated_end(::vg::Visit* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Snarl.end)
}

// optional .vg.Snarl parent = 4;
bool Snarl::has_parent() const {
  return !_is_default_instance_ && parent_ != NULL;
}
void Snarl::clear_parent() {
  if (GetArenaNoVirtual() == NULL && parent_ != NULL) delete parent_;
  parent_ = NULL;
}
const ::vg::Snarl& Snarl::parent() const {
  // @@protoc_insertion_point(field_get:vg.Snarl.parent)
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
::vg::Snarl* Snarl::mutable_parent() {
  
  if (parent_ == NULL) {
    parent_ = new ::vg::Snarl;
  }
  // @@protoc_insertion_point(field_mutable:vg.Snarl.parent)
  return parent_;
}
::vg::Snarl* Snarl::release_parent() {
  // @@protoc_insertion_point(field_release:vg.Snarl.parent)
  
  ::vg::Snarl* temp = parent_;
  parent_ = NULL;
  return temp;
}
void Snarl::set_allocated_parent(::vg::Snarl* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Snarl.parent)
}

// optional string name = 5;
void Snarl::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Snarl::name() const {
  // @@protoc_insertion_point(field_get:vg.Snarl.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Snarl::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Snarl.name)
}
 void Snarl::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Snarl.name)
}
 void Snarl::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Snarl.name)
}
 ::std::string* Snarl::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Snarl.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Snarl::release_name() {
  // @@protoc_insertion_point(field_release:vg.Snarl.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Snarl::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Snarl.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visit::kNodeIdFieldNumber;
const int Visit::kSnarlFieldNumber;
const int Visit::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visit::Visit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Visit)
}

void Visit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  snarl_ = const_cast< ::vg::Snarl*>(&::vg::Snarl::default_instance());
}

Visit::Visit(const Visit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Visit)
}

void Visit::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = GOOGLE_LONGLONG(0);
  snarl_ = NULL;
  backward_ = false;
}

Visit::~Visit() {
  // @@protoc_insertion_point(destructor:vg.Visit)
  SharedDtor();
}

void Visit::SharedDtor() {
  if (this != default_instance_) {
    delete snarl_;
  }
}

void Visit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visit_descriptor_;
}

const Visit& Visit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Visit* Visit::default_instance_ = NULL;

Visit* Visit::New(::google::protobuf::Arena* arena) const {
  Visit* n = new Visit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Visit::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Visit)
  node_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && snarl_ != NULL) delete snarl_;
  snarl_ = NULL;
  backward_ = false;
}

bool Visit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Visit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_snarl;
        break;
      }

      // optional .vg.Snarl snarl = 2;
      case 2: {
        if (tag == 18) {
         parse_snarl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snarl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_backward;
        break;
      }

      // optional bool backward = 3;
      case 3: {
        if (tag == 24) {
         parse_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Visit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Visit)
  return false;
#undef DO_
}

void Visit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Visit)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // optional .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snarl_, output);
  }

  // optional bool backward = 3;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->backward(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Visit)
}

::google::protobuf::uint8* Visit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Visit)
  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // optional .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->snarl_, false, target);
  }

  // optional bool backward = 3;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->backward(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Visit)
  return target;
}

int Visit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Visit)
  int total_size = 0;

  // optional int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // optional .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snarl_);
  }

  // optional bool backward = 3;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Visit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Visit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Visit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Visit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Visit)
    MergeFrom(*source);
  }
}

void Visit::MergeFrom(const Visit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Visit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.has_snarl()) {
    mutable_snarl()->::vg::Snarl::MergeFrom(from.snarl());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
}

void Visit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Visit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visit::CopyFrom(const Visit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Visit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visit::IsInitialized() const {

  return true;
}

void Visit::Swap(Visit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visit::InternalSwap(Visit* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(snarl_, other->snarl_);
  std::swap(backward_, other->backward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Visit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visit_descriptor_;
  metadata.reflection = Visit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Visit

// optional int64 node_id = 1;
void Visit::clear_node_id() {
  node_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visit::node_id() const {
  // @@protoc_insertion_point(field_get:vg.Visit.node_id)
  return node_id_;
}
 void Visit::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:vg.Visit.node_id)
}

// optional .vg.Snarl snarl = 2;
bool Visit::has_snarl() const {
  return !_is_default_instance_ && snarl_ != NULL;
}
void Visit::clear_snarl() {
  if (GetArenaNoVirtual() == NULL && snarl_ != NULL) delete snarl_;
  snarl_ = NULL;
}
const ::vg::Snarl& Visit::snarl() const {
  // @@protoc_insertion_point(field_get:vg.Visit.snarl)
  return snarl_ != NULL ? *snarl_ : *default_instance_->snarl_;
}
::vg::Snarl* Visit::mutable_snarl() {
  
  if (snarl_ == NULL) {
    snarl_ = new ::vg::Snarl;
  }
  // @@protoc_insertion_point(field_mutable:vg.Visit.snarl)
  return snarl_;
}
::vg::Snarl* Visit::release_snarl() {
  // @@protoc_insertion_point(field_release:vg.Visit.snarl)
  
  ::vg::Snarl* temp = snarl_;
  snarl_ = NULL;
  return temp;
}
void Visit::set_allocated_snarl(::vg::Snarl* snarl) {
  delete snarl_;
  snarl_ = snarl;
  if (snarl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Visit.snarl)
}

// optional bool backward = 3;
void Visit::clear_backward() {
  backward_ = false;
}
 bool Visit::backward() const {
  // @@protoc_insertion_point(field_get:vg.Visit.backward)
  return backward_;
}
 void Visit::set_backward(bool value) {
  
  backward_ = value;
  // @@protoc_insertion_point(field_set:vg.Visit.backward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnarlTraversal::kVisitsFieldNumber;
const int SnarlTraversal::kSnarlFieldNumber;
const int SnarlTraversal::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnarlTraversal::SnarlTraversal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.SnarlTraversal)
}

void SnarlTraversal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  snarl_ = const_cast< ::vg::Snarl*>(&::vg::Snarl::default_instance());
}

SnarlTraversal::SnarlTraversal(const SnarlTraversal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.SnarlTraversal)
}

void SnarlTraversal::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  snarl_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SnarlTraversal::~SnarlTraversal() {
  // @@protoc_insertion_point(destructor:vg.SnarlTraversal)
  SharedDtor();
}

void SnarlTraversal::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete snarl_;
  }
}

void SnarlTraversal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnarlTraversal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnarlTraversal_descriptor_;
}

const SnarlTraversal& SnarlTraversal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

SnarlTraversal* SnarlTraversal::default_instance_ = NULL;

SnarlTraversal* SnarlTraversal::New(::google::protobuf::Arena* arena) const {
  SnarlTraversal* n = new SnarlTraversal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnarlTraversal::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.SnarlTraversal)
  if (GetArenaNoVirtual() == NULL && snarl_ != NULL) delete snarl_;
  snarl_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visits_.Clear();
}

bool SnarlTraversal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.SnarlTraversal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.Visit visits = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_visits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_visits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_visits;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_snarl;
        break;
      }

      // optional .vg.Snarl snarl = 2;
      case 2: {
        if (tag == 18) {
         parse_snarl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snarl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.SnarlTraversal.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.SnarlTraversal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.SnarlTraversal)
  return false;
#undef DO_
}

void SnarlTraversal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.SnarlTraversal)
  // repeated .vg.Visit visits = 1;
  for (unsigned int i = 0, n = this->visits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visits(i), output);
  }

  // optional .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snarl_, output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.SnarlTraversal.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.SnarlTraversal)
}

::google::protobuf::uint8* SnarlTraversal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.SnarlTraversal)
  // repeated .vg.Visit visits = 1;
  for (unsigned int i = 0, n = this->visits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->visits(i), false, target);
  }

  // optional .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->snarl_, false, target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.SnarlTraversal.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.SnarlTraversal)
  return target;
}

int SnarlTraversal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.SnarlTraversal)
  int total_size = 0;

  // optional .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snarl_);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .vg.Visit visits = 1;
  total_size += 1 * this->visits_size();
  for (int i = 0; i < this->visits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visits(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnarlTraversal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.SnarlTraversal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SnarlTraversal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SnarlTraversal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.SnarlTraversal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.SnarlTraversal)
    MergeFrom(*source);
  }
}

void SnarlTraversal::MergeFrom(const SnarlTraversal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.SnarlTraversal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  visits_.MergeFrom(from.visits_);
  if (from.has_snarl()) {
    mutable_snarl()->::vg::Snarl::MergeFrom(from.snarl());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SnarlTraversal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.SnarlTraversal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnarlTraversal::CopyFrom(const SnarlTraversal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.SnarlTraversal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnarlTraversal::IsInitialized() const {

  return true;
}

void SnarlTraversal::Swap(SnarlTraversal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnarlTraversal::InternalSwap(SnarlTraversal* other) {
  visits_.UnsafeArenaSwap(&other->visits_);
  std::swap(snarl_, other->snarl_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnarlTraversal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnarlTraversal_descriptor_;
  metadata.reflection = SnarlTraversal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnarlTraversal

// repeated .vg.Visit visits = 1;
int SnarlTraversal::visits_size() const {
  return visits_.size();
}
void SnarlTraversal::clear_visits() {
  visits_.Clear();
}
const ::vg::Visit& SnarlTraversal::visits(int index) const {
  // @@protoc_insertion_point(field_get:vg.SnarlTraversal.visits)
  return visits_.Get(index);
}
::vg::Visit* SnarlTraversal::mutable_visits(int index) {
  // @@protoc_insertion_point(field_mutable:vg.SnarlTraversal.visits)
  return visits_.Mutable(index);
}
::vg::Visit* SnarlTraversal::add_visits() {
  // @@protoc_insertion_point(field_add:vg.SnarlTraversal.visits)
  return visits_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Visit >*
SnarlTraversal::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:vg.SnarlTraversal.visits)
  return &visits_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Visit >&
SnarlTraversal::visits() const {
  // @@protoc_insertion_point(field_list:vg.SnarlTraversal.visits)
  return visits_;
}

// optional .vg.Snarl snarl = 2;
bool SnarlTraversal::has_snarl() const {
  return !_is_default_instance_ && snarl_ != NULL;
}
void SnarlTraversal::clear_snarl() {
  if (GetArenaNoVirtual() == NULL && snarl_ != NULL) delete snarl_;
  snarl_ = NULL;
}
const ::vg::Snarl& SnarlTraversal::snarl() const {
  // @@protoc_insertion_point(field_get:vg.SnarlTraversal.snarl)
  return snarl_ != NULL ? *snarl_ : *default_instance_->snarl_;
}
::vg::Snarl* SnarlTraversal::mutable_snarl() {
  
  if (snarl_ == NULL) {
    snarl_ = new ::vg::Snarl;
  }
  // @@protoc_insertion_point(field_mutable:vg.SnarlTraversal.snarl)
  return snarl_;
}
::vg::Snarl* SnarlTraversal::release_snarl() {
  // @@protoc_insertion_point(field_release:vg.SnarlTraversal.snarl)
  
  ::vg::Snarl* temp = snarl_;
  snarl_ = NULL;
  return temp;
}
void SnarlTraversal::set_allocated_snarl(::vg::Snarl* snarl) {
  delete snarl_;
  snarl_ = snarl;
  if (snarl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.SnarlTraversal.snarl)
}

// optional string name = 3;
void SnarlTraversal::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SnarlTraversal::name() const {
  // @@protoc_insertion_point(field_get:vg.SnarlTraversal.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnarlTraversal::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.SnarlTraversal.name)
}
 void SnarlTraversal::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.SnarlTraversal.name)
}
 void SnarlTraversal::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.SnarlTraversal.name)
}
 ::std::string* SnarlTraversal::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.SnarlTraversal.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnarlTraversal::release_name() {
  // @@protoc_insertion_point(field_release:vg.SnarlTraversal.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnarlTraversal::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.SnarlTraversal.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Locus::kNameFieldNumber;
const int Locus::kAlleleFieldNumber;
const int Locus::kSupportFieldNumber;
const int Locus::kGenotypeFieldNumber;
const int Locus::kOverallSupportFieldNumber;
const int Locus::kAlleleLogLikelihoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Locus::Locus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Locus)
}

void Locus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  overall_support_ = const_cast< ::vg::Support*>(&::vg::Support::default_instance());
}

Locus::Locus(const Locus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Locus)
}

void Locus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overall_support_ = NULL;
}

Locus::~Locus() {
  // @@protoc_insertion_point(destructor:vg.Locus)
  SharedDtor();
}

void Locus::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete overall_support_;
  }
}

void Locus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Locus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Locus_descriptor_;
}

const Locus& Locus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Locus* Locus::default_instance_ = NULL;

Locus* Locus::New(::google::protobuf::Arena* arena) const {
  Locus* n = new Locus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Locus::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Locus)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && overall_support_ != NULL) delete overall_support_;
  overall_support_ = NULL;
  allele_.Clear();
  support_.Clear();
  genotype_.Clear();
  allele_log_likelihood_.Clear();
}

bool Locus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Locus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Locus.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_allele;
        break;
      }

      // repeated .vg.Path allele = 2;
      case 2: {
        if (tag == 18) {
         parse_allele:
          DO_(input->IncrementRecursionDepth());
         parse_loop_allele:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_allele()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_allele;
        if (input->ExpectTag(26)) goto parse_loop_support;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Support support = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_support:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_support()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_support;
        if (input->ExpectTag(34)) goto parse_loop_genotype;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .vg.Genotype genotype = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_genotype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_genotype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_genotype;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_overall_support;
        break;
      }

      // optional .vg.Support overall_support = 5;
      case 5: {
        if (tag == 42) {
         parse_overall_support:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overall_support()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_allele_log_likelihood;
        break;
      }

      // repeated double allele_log_likelihood = 6;
      case 6: {
        if (tag == 50) {
         parse_allele_log_likelihood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_allele_log_likelihood())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_allele_log_likelihood())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Locus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Locus)
  return false;
#undef DO_
}

void Locus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Locus)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Locus.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .vg.Path allele = 2;
  for (unsigned int i = 0, n = this->allele_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allele(i), output);
  }

  // repeated .vg.Support support = 3;
  for (unsigned int i = 0, n = this->support_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->support(i), output);
  }

  // repeated .vg.Genotype genotype = 4;
  for (unsigned int i = 0, n = this->genotype_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->genotype(i), output);
  }

  // optional .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->overall_support_, output);
  }

  // repeated double allele_log_likelihood = 6;
  if (this->allele_log_likelihood_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_allele_log_likelihood_cached_byte_size_);
  }
  for (int i = 0; i < this->allele_log_likelihood_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->allele_log_likelihood(i), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Locus)
}

::google::protobuf::uint8* Locus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Locus)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Locus.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .vg.Path allele = 2;
  for (unsigned int i = 0, n = this->allele_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->allele(i), false, target);
  }

  // repeated .vg.Support support = 3;
  for (unsigned int i = 0, n = this->support_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->support(i), false, target);
  }

  // repeated .vg.Genotype genotype = 4;
  for (unsigned int i = 0, n = this->genotype_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->genotype(i), false, target);
  }

  // optional .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->overall_support_, false, target);
  }

  // repeated double allele_log_likelihood = 6;
  if (this->allele_log_likelihood_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _allele_log_likelihood_cached_byte_size_, target);
  }
  for (int i = 0; i < this->allele_log_likelihood_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->allele_log_likelihood(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Locus)
  return target;
}

int Locus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Locus)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->overall_support_);
  }

  // repeated .vg.Path allele = 2;
  total_size += 1 * this->allele_size();
  for (int i = 0; i < this->allele_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allele(i));
  }

  // repeated .vg.Support support = 3;
  total_size += 1 * this->support_size();
  for (int i = 0; i < this->support_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->support(i));
  }

  // repeated .vg.Genotype genotype = 4;
  total_size += 1 * this->genotype_size();
  for (int i = 0; i < this->genotype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->genotype(i));
  }

  // repeated double allele_log_likelihood = 6;
  {
    int data_size = 0;
    data_size = 8 * this->allele_log_likelihood_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allele_log_likelihood_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Locus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Locus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Locus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Locus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Locus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Locus)
    MergeFrom(*source);
  }
}

void Locus::MergeFrom(const Locus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Locus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  allele_.MergeFrom(from.allele_);
  support_.MergeFrom(from.support_);
  genotype_.MergeFrom(from.genotype_);
  allele_log_likelihood_.MergeFrom(from.allele_log_likelihood_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_overall_support()) {
    mutable_overall_support()->::vg::Support::MergeFrom(from.overall_support());
  }
}

void Locus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Locus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locus::CopyFrom(const Locus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Locus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locus::IsInitialized() const {

  return true;
}

void Locus::Swap(Locus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Locus::InternalSwap(Locus* other) {
  name_.Swap(&other->name_);
  allele_.UnsafeArenaSwap(&other->allele_);
  support_.UnsafeArenaSwap(&other->support_);
  genotype_.UnsafeArenaSwap(&other->genotype_);
  std::swap(overall_support_, other->overall_support_);
  allele_log_likelihood_.UnsafeArenaSwap(&other->allele_log_likelihood_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Locus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Locus_descriptor_;
  metadata.reflection = Locus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Locus

// optional string name = 1;
void Locus::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Locus::name() const {
  // @@protoc_insertion_point(field_get:vg.Locus.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Locus::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vg.Locus.name)
}
 void Locus::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vg.Locus.name)
}
 void Locus::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vg.Locus.name)
}
 ::std::string* Locus::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vg.Locus.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Locus::release_name() {
  // @@protoc_insertion_point(field_release:vg.Locus.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Locus::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vg.Locus.name)
}

// repeated .vg.Path allele = 2;
int Locus::allele_size() const {
  return allele_.size();
}
void Locus::clear_allele() {
  allele_.Clear();
}
const ::vg::Path& Locus::allele(int index) const {
  // @@protoc_insertion_point(field_get:vg.Locus.allele)
  return allele_.Get(index);
}
::vg::Path* Locus::mutable_allele(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Locus.allele)
  return allele_.Mutable(index);
}
::vg::Path* Locus::add_allele() {
  // @@protoc_insertion_point(field_add:vg.Locus.allele)
  return allele_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Path >*
Locus::mutable_allele() {
  // @@protoc_insertion_point(field_mutable_list:vg.Locus.allele)
  return &allele_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Path >&
Locus::allele() const {
  // @@protoc_insertion_point(field_list:vg.Locus.allele)
  return allele_;
}

// repeated .vg.Support support = 3;
int Locus::support_size() const {
  return support_.size();
}
void Locus::clear_support() {
  support_.Clear();
}
const ::vg::Support& Locus::support(int index) const {
  // @@protoc_insertion_point(field_get:vg.Locus.support)
  return support_.Get(index);
}
::vg::Support* Locus::mutable_support(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Locus.support)
  return support_.Mutable(index);
}
::vg::Support* Locus::add_support() {
  // @@protoc_insertion_point(field_add:vg.Locus.support)
  return support_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Support >*
Locus::mutable_support() {
  // @@protoc_insertion_point(field_mutable_list:vg.Locus.support)
  return &support_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Support >&
Locus::support() const {
  // @@protoc_insertion_point(field_list:vg.Locus.support)
  return support_;
}

// repeated .vg.Genotype genotype = 4;
int Locus::genotype_size() const {
  return genotype_.size();
}
void Locus::clear_genotype() {
  genotype_.Clear();
}
const ::vg::Genotype& Locus::genotype(int index) const {
  // @@protoc_insertion_point(field_get:vg.Locus.genotype)
  return genotype_.Get(index);
}
::vg::Genotype* Locus::mutable_genotype(int index) {
  // @@protoc_insertion_point(field_mutable:vg.Locus.genotype)
  return genotype_.Mutable(index);
}
::vg::Genotype* Locus::add_genotype() {
  // @@protoc_insertion_point(field_add:vg.Locus.genotype)
  return genotype_.Add();
}
::google::protobuf::RepeatedPtrField< ::vg::Genotype >*
Locus::mutable_genotype() {
  // @@protoc_insertion_point(field_mutable_list:vg.Locus.genotype)
  return &genotype_;
}
const ::google::protobuf::RepeatedPtrField< ::vg::Genotype >&
Locus::genotype() const {
  // @@protoc_insertion_point(field_list:vg.Locus.genotype)
  return genotype_;
}

// optional .vg.Support overall_support = 5;
bool Locus::has_overall_support() const {
  return !_is_default_instance_ && overall_support_ != NULL;
}
void Locus::clear_overall_support() {
  if (GetArenaNoVirtual() == NULL && overall_support_ != NULL) delete overall_support_;
  overall_support_ = NULL;
}
const ::vg::Support& Locus::overall_support() const {
  // @@protoc_insertion_point(field_get:vg.Locus.overall_support)
  return overall_support_ != NULL ? *overall_support_ : *default_instance_->overall_support_;
}
::vg::Support* Locus::mutable_overall_support() {
  
  if (overall_support_ == NULL) {
    overall_support_ = new ::vg::Support;
  }
  // @@protoc_insertion_point(field_mutable:vg.Locus.overall_support)
  return overall_support_;
}
::vg::Support* Locus::release_overall_support() {
  // @@protoc_insertion_point(field_release:vg.Locus.overall_support)
  
  ::vg::Support* temp = overall_support_;
  overall_support_ = NULL;
  return temp;
}
void Locus::set_allocated_overall_support(::vg::Support* overall_support) {
  delete overall_support_;
  overall_support_ = overall_support;
  if (overall_support) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Locus.overall_support)
}

// repeated double allele_log_likelihood = 6;
int Locus::allele_log_likelihood_size() const {
  return allele_log_likelihood_.size();
}
void Locus::clear_allele_log_likelihood() {
  allele_log_likelihood_.Clear();
}
 double Locus::allele_log_likelihood(int index) const {
  // @@protoc_insertion_point(field_get:vg.Locus.allele_log_likelihood)
  return allele_log_likelihood_.Get(index);
}
 void Locus::set_allele_log_likelihood(int index, double value) {
  allele_log_likelihood_.Set(index, value);
  // @@protoc_insertion_point(field_set:vg.Locus.allele_log_likelihood)
}
 void Locus::add_allele_log_likelihood(double value) {
  allele_log_likelihood_.Add(value);
  // @@protoc_insertion_point(field_add:vg.Locus.allele_log_likelihood)
}
 const ::google::protobuf::RepeatedField< double >&
Locus::allele_log_likelihood() const {
  // @@protoc_insertion_point(field_list:vg.Locus.allele_log_likelihood)
  return allele_log_likelihood_;
}
 ::google::protobuf::RepeatedField< double >*
Locus::mutable_allele_log_likelihood() {
  // @@protoc_insertion_point(field_mutable_list:vg.Locus.allele_log_likelihood)
  return &allele_log_likelihood_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Genotype::kAlleleFieldNumber;
const int Genotype::kIsPhasedFieldNumber;
const int Genotype::kLikelihoodFieldNumber;
const int Genotype::kLogLikelihoodFieldNumber;
const int Genotype::kLogPriorFieldNumber;
const int Genotype::kLogPosteriorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Genotype::Genotype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Genotype)
}

void Genotype::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Genotype::Genotype(const Genotype& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Genotype)
}

void Genotype::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_phased_ = false;
  likelihood_ = 0;
  log_likelihood_ = 0;
  log_prior_ = 0;
  log_posterior_ = 0;
}

Genotype::~Genotype() {
  // @@protoc_insertion_point(destructor:vg.Genotype)
  SharedDtor();
}

void Genotype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Genotype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Genotype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Genotype_descriptor_;
}

const Genotype& Genotype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Genotype* Genotype::default_instance_ = NULL;

Genotype* Genotype::New(::google::protobuf::Arena* arena) const {
  Genotype* n = new Genotype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Genotype::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Genotype)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Genotype, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Genotype*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(likelihood_, is_phased_);

#undef ZR_HELPER_
#undef ZR_

  allele_.Clear();
}

bool Genotype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Genotype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 allele = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allele())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_allele())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_phased;
        break;
      }

      // optional bool is_phased = 2;
      case 2: {
        if (tag == 16) {
         parse_is_phased:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phased_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_likelihood;
        break;
      }

      // optional double likelihood = 3;
      case 3: {
        if (tag == 25) {
         parse_likelihood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &likelihood_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_log_likelihood;
        break;
      }

      // optional double log_likelihood = 4;
      case 4: {
        if (tag == 33) {
         parse_log_likelihood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &log_likelihood_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_log_prior;
        break;
      }

      // optional double log_prior = 5;
      case 5: {
        if (tag == 41) {
         parse_log_prior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &log_prior_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_log_posterior;
        break;
      }

      // optional double log_posterior = 6;
      case 6: {
        if (tag == 49) {
         parse_log_posterior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &log_posterior_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Genotype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Genotype)
  return false;
#undef DO_
}

void Genotype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Genotype)
  // repeated int32 allele = 1;
  if (this->allele_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_allele_cached_byte_size_);
  }
  for (int i = 0; i < this->allele_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allele(i), output);
  }

  // optional bool is_phased = 2;
  if (this->is_phased() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_phased(), output);
  }

  // optional double likelihood = 3;
  if (this->likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->likelihood(), output);
  }

  // optional double log_likelihood = 4;
  if (this->log_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->log_likelihood(), output);
  }

  // optional double log_prior = 5;
  if (this->log_prior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->log_prior(), output);
  }

  // optional double log_posterior = 6;
  if (this->log_posterior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->log_posterior(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Genotype)
}

::google::protobuf::uint8* Genotype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Genotype)
  // repeated int32 allele = 1;
  if (this->allele_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _allele_cached_byte_size_, target);
  }
  for (int i = 0; i < this->allele_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->allele(i), target);
  }

  // optional bool is_phased = 2;
  if (this->is_phased() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_phased(), target);
  }

  // optional double likelihood = 3;
  if (this->likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->likelihood(), target);
  }

  // optional double log_likelihood = 4;
  if (this->log_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->log_likelihood(), target);
  }

  // optional double log_prior = 5;
  if (this->log_prior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->log_prior(), target);
  }

  // optional double log_posterior = 6;
  if (this->log_posterior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->log_posterior(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Genotype)
  return target;
}

int Genotype::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Genotype)
  int total_size = 0;

  // optional bool is_phased = 2;
  if (this->is_phased() != 0) {
    total_size += 1 + 1;
  }

  // optional double likelihood = 3;
  if (this->likelihood() != 0) {
    total_size += 1 + 8;
  }

  // optional double log_likelihood = 4;
  if (this->log_likelihood() != 0) {
    total_size += 1 + 8;
  }

  // optional double log_prior = 5;
  if (this->log_prior() != 0) {
    total_size += 1 + 8;
  }

  // optional double log_posterior = 6;
  if (this->log_posterior() != 0) {
    total_size += 1 + 8;
  }

  // repeated int32 allele = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->allele_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allele(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allele_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Genotype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Genotype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Genotype* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Genotype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Genotype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Genotype)
    MergeFrom(*source);
  }
}

void Genotype::MergeFrom(const Genotype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Genotype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  allele_.MergeFrom(from.allele_);
  if (from.is_phased() != 0) {
    set_is_phased(from.is_phased());
  }
  if (from.likelihood() != 0) {
    set_likelihood(from.likelihood());
  }
  if (from.log_likelihood() != 0) {
    set_log_likelihood(from.log_likelihood());
  }
  if (from.log_prior() != 0) {
    set_log_prior(from.log_prior());
  }
  if (from.log_posterior() != 0) {
    set_log_posterior(from.log_posterior());
  }
}

void Genotype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Genotype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genotype::CopyFrom(const Genotype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Genotype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genotype::IsInitialized() const {

  return true;
}

void Genotype::Swap(Genotype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Genotype::InternalSwap(Genotype* other) {
  allele_.UnsafeArenaSwap(&other->allele_);
  std::swap(is_phased_, other->is_phased_);
  std::swap(likelihood_, other->likelihood_);
  std::swap(log_likelihood_, other->log_likelihood_);
  std::swap(log_prior_, other->log_prior_);
  std::swap(log_posterior_, other->log_posterior_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Genotype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Genotype_descriptor_;
  metadata.reflection = Genotype_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Genotype

// repeated int32 allele = 1;
int Genotype::allele_size() const {
  return allele_.size();
}
void Genotype::clear_allele() {
  allele_.Clear();
}
 ::google::protobuf::int32 Genotype::allele(int index) const {
  // @@protoc_insertion_point(field_get:vg.Genotype.allele)
  return allele_.Get(index);
}
 void Genotype::set_allele(int index, ::google::protobuf::int32 value) {
  allele_.Set(index, value);
  // @@protoc_insertion_point(field_set:vg.Genotype.allele)
}
 void Genotype::add_allele(::google::protobuf::int32 value) {
  allele_.Add(value);
  // @@protoc_insertion_point(field_add:vg.Genotype.allele)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Genotype::allele() const {
  // @@protoc_insertion_point(field_list:vg.Genotype.allele)
  return allele_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Genotype::mutable_allele() {
  // @@protoc_insertion_point(field_mutable_list:vg.Genotype.allele)
  return &allele_;
}

// optional bool is_phased = 2;
void Genotype::clear_is_phased() {
  is_phased_ = false;
}
 bool Genotype::is_phased() const {
  // @@protoc_insertion_point(field_get:vg.Genotype.is_phased)
  return is_phased_;
}
 void Genotype::set_is_phased(bool value) {
  
  is_phased_ = value;
  // @@protoc_insertion_point(field_set:vg.Genotype.is_phased)
}

// optional double likelihood = 3;
void Genotype::clear_likelihood() {
  likelihood_ = 0;
}
 double Genotype::likelihood() const {
  // @@protoc_insertion_point(field_get:vg.Genotype.likelihood)
  return likelihood_;
}
 void Genotype::set_likelihood(double value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:vg.Genotype.likelihood)
}

// optional double log_likelihood = 4;
void Genotype::clear_log_likelihood() {
  log_likelihood_ = 0;
}
 double Genotype::log_likelihood() const {
  // @@protoc_insertion_point(field_get:vg.Genotype.log_likelihood)
  return log_likelihood_;
}
 void Genotype::set_log_likelihood(double value) {
  
  log_likelihood_ = value;
  // @@protoc_insertion_point(field_set:vg.Genotype.log_likelihood)
}

// optional double log_prior = 5;
void Genotype::clear_log_prior() {
  log_prior_ = 0;
}
 double Genotype::log_prior() const {
  // @@protoc_insertion_point(field_get:vg.Genotype.log_prior)
  return log_prior_;
}
 void Genotype::set_log_prior(double value) {
  
  log_prior_ = value;
  // @@protoc_insertion_point(field_set:vg.Genotype.log_prior)
}

// optional double log_posterior = 6;
void Genotype::clear_log_posterior() {
  log_posterior_ = 0;
}
 double Genotype::log_posterior() const {
  // @@protoc_insertion_point(field_get:vg.Genotype.log_posterior)
  return log_posterior_;
}
 void Genotype::set_log_posterior(double value) {
  
  log_posterior_ = value;
  // @@protoc_insertion_point(field_set:vg.Genotype.log_posterior)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Support::kQualityFieldNumber;
const int Support::kForwardFieldNumber;
const int Support::kReverseFieldNumber;
const int Support::kLeftFieldNumber;
const int Support::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Support::Support()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Support)
}

void Support::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Support::Support(const Support& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Support)
}

void Support::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  quality_ = 0;
  forward_ = 0;
  reverse_ = 0;
  left_ = 0;
  right_ = 0;
}

Support::~Support() {
  // @@protoc_insertion_point(destructor:vg.Support)
  SharedDtor();
}

void Support::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Support::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Support::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Support_descriptor_;
}

const Support& Support::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Support* Support::default_instance_ = NULL;

Support* Support::New(::google::protobuf::Arena* arena) const {
  Support* n = new Support;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Support::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Support)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Support, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Support*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(quality_, right_);

#undef ZR_HELPER_
#undef ZR_

}

bool Support::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Support)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double quality = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_forward;
        break;
      }

      // optional double forward = 2;
      case 2: {
        if (tag == 17) {
         parse_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_reverse;
        break;
      }

      // optional double reverse = 3;
      case 3: {
        if (tag == 25) {
         parse_reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reverse_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_left;
        break;
      }

      // optional double left = 4;
      case 4: {
        if (tag == 33) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_right;
        break;
      }

      // optional double right = 5;
      case 5: {
        if (tag == 41) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Support)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Support)
  return false;
#undef DO_
}

void Support::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Support)
  // optional double quality = 1;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->quality(), output);
  }

  // optional double forward = 2;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->forward(), output);
  }

  // optional double reverse = 3;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->reverse(), output);
  }

  // optional double left = 4;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left(), output);
  }

  // optional double right = 5;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->right(), output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Support)
}

::google::protobuf::uint8* Support::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Support)
  // optional double quality = 1;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->quality(), target);
  }

  // optional double forward = 2;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->forward(), target);
  }

  // optional double reverse = 3;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->reverse(), target);
  }

  // optional double left = 4;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left(), target);
  }

  // optional double right = 5;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->right(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Support)
  return target;
}

int Support::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Support)
  int total_size = 0;

  // optional double quality = 1;
  if (this->quality() != 0) {
    total_size += 1 + 8;
  }

  // optional double forward = 2;
  if (this->forward() != 0) {
    total_size += 1 + 8;
  }

  // optional double reverse = 3;
  if (this->reverse() != 0) {
    total_size += 1 + 8;
  }

  // optional double left = 4;
  if (this->left() != 0) {
    total_size += 1 + 8;
  }

  // optional double right = 5;
  if (this->right() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Support::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Support)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Support* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Support>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Support)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Support)
    MergeFrom(*source);
  }
}

void Support::MergeFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Support)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void Support::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Support::CopyFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Support::IsInitialized() const {

  return true;
}

void Support::Swap(Support* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Support::InternalSwap(Support* other) {
  std::swap(quality_, other->quality_);
  std::swap(forward_, other->forward_);
  std::swap(reverse_, other->reverse_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Support::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Support_descriptor_;
  metadata.reflection = Support_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Support

// optional double quality = 1;
void Support::clear_quality() {
  quality_ = 0;
}
 double Support::quality() const {
  // @@protoc_insertion_point(field_get:vg.Support.quality)
  return quality_;
}
 void Support::set_quality(double value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:vg.Support.quality)
}

// optional double forward = 2;
void Support::clear_forward() {
  forward_ = 0;
}
 double Support::forward() const {
  // @@protoc_insertion_point(field_get:vg.Support.forward)
  return forward_;
}
 void Support::set_forward(double value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:vg.Support.forward)
}

// optional double reverse = 3;
void Support::clear_reverse() {
  reverse_ = 0;
}
 double Support::reverse() const {
  // @@protoc_insertion_point(field_get:vg.Support.reverse)
  return reverse_;
}
 void Support::set_reverse(double value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:vg.Support.reverse)
}

// optional double left = 4;
void Support::clear_left() {
  left_ = 0;
}
 double Support::left() const {
  // @@protoc_insertion_point(field_get:vg.Support.left)
  return left_;
}
 void Support::set_left(double value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:vg.Support.left)
}

// optional double right = 5;
void Support::clear_right() {
  right_ = 0;
}
 double Support::right() const {
  // @@protoc_insertion_point(field_get:vg.Support.right)
  return right_;
}
 void Support::set_right(double value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:vg.Support.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Translation::kFromFieldNumber;
const int Translation::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Translation::Translation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Translation)
}

void Translation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  from_ = const_cast< ::vg::Path*>(&::vg::Path::default_instance());
  to_ = const_cast< ::vg::Path*>(&::vg::Path::default_instance());
}

Translation::Translation(const Translation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vg.Translation)
}

void Translation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:vg.Translation)
  SharedDtor();
}

void Translation::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
  }
}

void Translation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Translation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Translation_descriptor_;
}

const Translation& Translation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vg_2eproto();
  return *default_instance_;
}

Translation* Translation::default_instance_ = NULL;

Translation* Translation::New(::google::protobuf::Arena* arena) const {
  Translation* n = new Translation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Translation)
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
  to_ = NULL;
}

bool Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Translation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vg.Path from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .vg.Path to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Translation)
  return false;
#undef DO_
}

void Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Translation)
  // optional .vg.Path from = 1;
  if (this->has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // optional .vg.Path to = 2;
  if (this->has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_, output);
  }

  // @@protoc_insertion_point(serialize_end:vg.Translation)
}

::google::protobuf::uint8* Translation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Translation)
  // optional .vg.Path from = 1;
  if (this->has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, false, target);
  }

  // optional .vg.Path to = 2;
  if (this->has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vg.Translation)
  return target;
}

int Translation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Translation)
  int total_size = 0;

  // optional .vg.Path from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_);
  }

  // optional .vg.Path to = 2;
  if (this->has_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Translation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Translation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Translation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Translation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Translation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Translation)
    MergeFrom(*source);
  }
}

void Translation::MergeFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Translation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_from()) {
    mutable_from()->::vg::Path::MergeFrom(from.from());
  }
  if (from.has_to()) {
    mutable_to()->::vg::Path::MergeFrom(from.to());
  }
}

void Translation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Translation::CopyFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {

  return true;
}

void Translation::Swap(Translation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Translation::InternalSwap(Translation* other) {
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Translation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Translation_descriptor_;
  metadata.reflection = Translation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Translation

// optional .vg.Path from = 1;
bool Translation::has_from() const {
  return !_is_default_instance_ && from_ != NULL;
}
void Translation::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
const ::vg::Path& Translation::from() const {
  // @@protoc_insertion_point(field_get:vg.Translation.from)
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
::vg::Path* Translation::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::vg::Path;
  }
  // @@protoc_insertion_point(field_mutable:vg.Translation.from)
  return from_;
}
::vg::Path* Translation::release_from() {
  // @@protoc_insertion_point(field_release:vg.Translation.from)
  
  ::vg::Path* temp = from_;
  from_ = NULL;
  return temp;
}
void Translation::set_allocated_from(::vg::Path* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Translation.from)
}

// optional .vg.Path to = 2;
bool Translation::has_to() const {
  return !_is_default_instance_ && to_ != NULL;
}
void Translation::clear_to() {
  if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
  to_ = NULL;
}
const ::vg::Path& Translation::to() const {
  // @@protoc_insertion_point(field_get:vg.Translation.to)
  return to_ != NULL ? *to_ : *default_instance_->to_;
}
::vg::Path* Translation::mutable_to() {
  
  if (to_ == NULL) {
    to_ = new ::vg::Path;
  }
  // @@protoc_insertion_point(field_mutable:vg.Translation.to)
  return to_;
}
::vg::Path* Translation::release_to() {
  // @@protoc_insertion_point(field_release:vg.Translation.to)
  
  ::vg::Path* temp = to_;
  to_ = NULL;
  return temp;
}
void Translation::set_allocated_to(::vg::Path* to) {
  delete to_;
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vg.Translation.to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vg

// @@protoc_insertion_point(global_scope)
